[{"/Users/bob/codes/mobility-blockchain-frontend/src/index.js":"1","/Users/bob/codes/mobility-blockchain-frontend/src/App.js":"2","/Users/bob/codes/mobility-blockchain-frontend/src/views/LoginView.js":"3","/Users/bob/codes/mobility-blockchain-frontend/src/redux/reducers/index.js":"4","/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js":"5","/Users/bob/codes/mobility-blockchain-frontend/src/component/UI/Theme.js":"6","/Users/bob/codes/mobility-blockchain-frontend/src/redux/reducers/userReducer.js":"7","/Users/bob/codes/mobility-blockchain-frontend/src/modal/Dialog.js":"8","/Users/bob/codes/mobility-blockchain-frontend/src/component/ConfirmationPopup.js":"9","/Users/bob/codes/mobility-blockchain-frontend/src/component/FolderIcon.js":"10","/Users/bob/codes/mobility-blockchain-frontend/src/component/AppNavBar.js":"11","/Users/bob/codes/mobility-blockchain-frontend/src/views/Landing.js":"12","/Users/bob/codes/mobility-blockchain-frontend/src/views/SignupView.js":"13","/Users/bob/codes/mobility-blockchain-frontend/src/component/SignupComponent.js":"14","/Users/bob/codes/mobility-blockchain-frontend/src/component/AlertDialog.js":"15","/Users/bob/codes/mobility-blockchain-frontend/src/views/Upload.js":"16","/Users/bob/codes/mobility-blockchain-frontend/src/views/Timeline.js":"17","/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js":"18","/Users/bob/codes/mobility-blockchain-frontend/src/component/Timeline.js":"19","/Users/bob/codes/mobility-blockchain-frontend/src/auth/PrivateRoute.js":"20","/Users/bob/codes/mobility-blockchain-frontend/src/auth/auth.js":"21","/Users/bob/codes/mobility-blockchain-frontend/src/component/TranscriptStatus.js":"22","/Users/bob/codes/mobility-blockchain-frontend/src/views/Explorer.js":"23","/Users/bob/codes/mobility-blockchain-frontend/src/views/VerifyView.js":"24","/Users/bob/codes/mobility-blockchain-frontend/src/component/SelectionList.js":"25","/Users/bob/codes/mobility-blockchain-frontend/src/component/TranscriptCard.js":"26","/Users/bob/codes/mobility-blockchain-frontend/src/component/DynamicCard.js":"27","/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/util.js":"28","/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/contractCalls.js":"29","/Users/bob/codes/mobility-blockchain-frontend/src/services/api.js":"30","/Users/bob/codes/mobility-blockchain-frontend/src/utils/accountUtils.js":"31","/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/nodeCalls.js":"32","/Users/bob/codes/mobility-blockchain-frontend/src/component/Spinner.js":"33","/Users/bob/codes/mobility-blockchain-frontend/src/views/BatchSend.js":"34","/Users/bob/codes/mobility-blockchain-frontend/src/component/AccountButton.js":"35"},{"size":184,"mtime":1642778555332,"results":"36","hashOfConfig":"37"},{"size":1993,"mtime":1644281328642,"results":"38","hashOfConfig":"37"},{"size":2154,"mtime":1644278414447,"results":"39","hashOfConfig":"37"},{"size":122,"mtime":1641306164753,"results":"40","hashOfConfig":"37"},{"size":3282,"mtime":1644278414446,"results":"41","hashOfConfig":"37"},{"size":1498,"mtime":1641306164752,"results":"42","hashOfConfig":"37"},{"size":1939,"mtime":1643661952194,"results":"43","hashOfConfig":"37"},{"size":1668,"mtime":1641306164753,"results":"44","hashOfConfig":"37"},{"size":643,"mtime":1641306164752,"results":"45","hashOfConfig":"37"},{"size":506,"mtime":1641945529480,"results":"46","hashOfConfig":"37"},{"size":2660,"mtime":1644278414446,"results":"47","hashOfConfig":"37"},{"size":2920,"mtime":1644278414447,"results":"48","hashOfConfig":"37"},{"size":2657,"mtime":1644160858318,"results":"49","hashOfConfig":"37"},{"size":4323,"mtime":1644160858316,"results":"50","hashOfConfig":"37"},{"size":2358,"mtime":1641489710583,"results":"51","hashOfConfig":"37"},{"size":4661,"mtime":1644281333586,"results":"52","hashOfConfig":"37"},{"size":838,"mtime":1644278414447,"results":"53","hashOfConfig":"37"},{"size":5211,"mtime":1644281333592,"results":"54","hashOfConfig":"37"},{"size":7551,"mtime":1644278414446,"results":"55","hashOfConfig":"37"},{"size":749,"mtime":1643661952193,"results":"56","hashOfConfig":"37"},{"size":567,"mtime":1644160858315,"results":"57","hashOfConfig":"37"},{"size":10832,"mtime":1644282557875,"results":"58","hashOfConfig":"37"},{"size":475,"mtime":1644278414447,"results":"59","hashOfConfig":"37"},{"size":15332,"mtime":1644281333592,"results":"60","hashOfConfig":"37"},{"size":1075,"mtime":1644278414446,"results":"61","hashOfConfig":"37"},{"size":1853,"mtime":1644072814382,"results":"62","hashOfConfig":"37"},{"size":882,"mtime":1644072814382,"results":"63","hashOfConfig":"37"},{"size":2650,"mtime":1644160858318,"results":"64","hashOfConfig":"37"},{"size":3209,"mtime":1644278414446,"results":"65","hashOfConfig":"37"},{"size":9677,"mtime":1644281333584,"results":"66","hashOfConfig":"37"},{"size":833,"mtime":1644281333585,"results":"67","hashOfConfig":"37"},{"size":655,"mtime":1644278414446,"results":"68","hashOfConfig":"37"},{"size":497,"mtime":1644160858316,"results":"69","hashOfConfig":"37"},{"size":9154,"mtime":1644281333585,"results":"70","hashOfConfig":"37"},{"size":1012,"mtime":1644278414446,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"i6rxja",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/bob/codes/mobility-blockchain-frontend/src/index.js",[],["158","159"],"/Users/bob/codes/mobility-blockchain-frontend/src/App.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/views/LoginView.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/redux/reducers/index.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/UI/Theme.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/redux/reducers/userReducer.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/modal/Dialog.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/ConfirmationPopup.js",["160"],"import React, { Component } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nclass ConfirmationPopup extends React.Component {\n    render() {\n        return (\n            <div className=\"popup\">\n                <div className=\"popup_inner\">\n                    <button id=\"close\" onClick={this.props.closePopup}>\n                        <CloseIcon></CloseIcon>{\" \"}\n                    </button>\n                    <h2 id=\"confirmation\">\n                        Transcript has been successfully sent{\" \"}\n                    </h2>\n                </div>\n            </div>\n        );\n    }\n}\nexport default ConfirmationPopup;\n",["161","162"],"/Users/bob/codes/mobility-blockchain-frontend/src/component/FolderIcon.js",["163","164"],"import UploadFileIcon from \"@mui/icons-material/UploadFile\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Checkbox } from \"@mui/material\";\nimport React, { Component } from \"react\";\n\nclass FolderIcon extends React.Component {\n    \n    render() {\n        return (\n            <Grid xs={1}>\n                {\" \"}\n               {/* <Checkbox id=\"checkboxPosition\" />{\" \"}*/ }\n                <UploadFileIcon id=\"icon\"></UploadFileIcon>\n            </Grid>\n        );\n    }\n}\nexport default FolderIcon;\n",["165","166"],"/Users/bob/codes/mobility-blockchain-frontend/src/component/AppNavBar.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/views/Landing.js",["167","168","169","170","171"],"import React from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport backgroundImage from \"../img/blockchain2.jpeg\";\nimport Popup from \"reactjs-popup\";\nimport LoginView from \"./LoginView\";\nimport SignupView from \"./SignupView\";\nimport Timeline from \"../component/Timeline\";\nimport TranscriptStatus from \"../component/TranscriptStatus\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '200vh',\n        backgroundImage: `url(${backgroundImage})`,\n        // backgroundRepeat: \"repeat-y\",\n        backgroundSize: \"cover\",\n        // filter: \"brightness(80%)\",\n    },\n    text: {\n        textAlign: \"center\",\n        color: \"#fff\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n    },\n    buttons: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n    buttonStyle1: {\n        background: \"#1d9419\",\n        color: \"#fff\",\n    },\n    buttonStyle2: {\n        background: \"#fde2e2\",\n        color: \"#000\",\n    },\n}));\n\nconst Landing = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Box p={20}>\n                <Box\n                    id=\"LandingTitle\"\n                    className={classes.text}\n                    fontSize=\"h2.fontSize\"\n                    fontWeight=\"fontWeightBold\"\n                    fontFamily=\"Monospace\"\n                >\n                    Welcome to ExChainge\n                </Box>\n                <Box\n                    className={classes.text}\n                    fontSize=\"h5.fontSize\"\n                    fontStyle=\"italic\"\n                    fontWeight=\"fontWeightLight\"\n                >\n                    Verify Transcripts with Blockchain Technology\n                </Box>\n\n                <TranscriptStatus items={['Upload transcript', 'Write to Chain', 'Sent Transcript', 'Verify Transcript']}></TranscriptStatus>\n\n                <Box className={classes.buttons} textAlign=\"center\" m={3}>\n                    <Popup\n                        trigger={\n                            <Button\n                                className={classes.buttonStyle1}\n                                variant=\"contained\"\n                            >\n                                Sign Up\n                            </Button>\n                        }\n                    >\n                        <div>\n                            {\" \"}\n                            <SignupView></SignupView>{\" \"}\n                        </div>\n                    </Popup>\n\n                    <LoginView></LoginView>{\" \"}\n                </Box>\n            </Box>\n        </div>\n    );\n};\n\nexport default Landing;\n","/Users/bob/codes/mobility-blockchain-frontend/src/views/SignupView.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/SignupComponent.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/AlertDialog.js",["172"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport UploadFileIcon from \"@mui/icons-material/UploadFile\";\n\n  function AlertDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button\n         variant=\"contained\"\n         color=\"primary\"\n        component=\"span\"\n        onClick={handleClickOpen}>\n         Send to University\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Select recieving university \"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          <h4\n             id=\"universities\"\n             onclick=\"selectText()\"\n                 >\n                   Technical University of Munich{\" \"}\n                        </h4>\n                        <h4\n                            id=\"universities\"\n                            \n                        >\n                            Ludwig Maximilian University of Munich\n                        </h4>\n                        <h4\n                            id=\"universities\"\n                         \n                        >\n                            {\" \"}\n                            ETH Zürich{\" \"}\n                        </h4>\n                        <h4\n                            id=\"universities\"\n                         \n                        >\n                            {\" \"}\n                            University of Twente\n                        </h4>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose} autoFocus>\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\nexport default AlertDialog;\n","/Users/bob/codes/mobility-blockchain-frontend/src/views/Upload.js",["173"],"import \"../App.css\";\nimport { Button } from \"@mui/material\";\nimport React from \"react\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport Spinner from \"../component/Spinner\";\n\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\nimport SelectionList from \"../component/SelectionList\";\nimport { storeInternalTranscripts } from \"../services/api\";\nimport Snackbar from '@mui/material/Snackbar';\nimport { sendTranscript } from \"../services/blockchain/contractCalls\";\nimport { startService } from \"../services/blockchain/util\";\nimport { hashTranscripts } from \"../utils/accountUtils\";\n\nfunction Upload(props) {\n    const [selectedUniIndex, setSelectedUniIndex] = React.useState(-1);\n    const [spinnerMessage, setSpinnerMessage] = React.useState(\"\");\n\n    const [showToast, setShowToast] = React.useState(false);\n    const [uploadedFile, setUploadedFile] = React.useState(null);\n    const [selectedFile, setSelectedFile] = React.useState({});\n\n    const [receiverList, setReceiverList] = React.useState(JSON.parse(localStorage.getItem('partnerUnis')));\n\n    const handleselectedFileDropzone = async (event) => {\n        console.log(event[0].file);\n        var file = event[0].file;\n        var reader = new FileReader();\n        reader.onload = async (event) => {\n            console.log(event.target.result);\n            setUploadedFile(event.target.result);\n        };\n        reader.readAsText(file);\n        setSelectedFile(event[0].file);\n    };\n\n    const handleSendLater = async () => {\n        const file = JSON.parse(uploadedFile);\n        file.batched = true;\n\n        await storeInternalTranscripts([file]);\n        console.log(\"Stored transcript locally\");\n\n        setShowToast(true);\n    };\n\n    const handleSendNow = async () => {\n        const receiverUni = receiverList[selectedUniIndex];\n\n        await startService();\n\n        const file = JSON.parse(uploadedFile);\n        //const transcriptHash = hashTranscript(file);\n        const transcriptHash = hashTranscripts(file);\n\n        try {\n            console.log(\"this is the hash\",transcriptHash)\n            const index = await sendTranscript(transcriptHash, receiverUni.blockchain_address);\n            \n            file.index = index;\n            console.log('file', file);\n\n            await storeInternalTranscripts([file]);\n            setSpinnerMessage(\"Sending file...\");\n            await postToServer(receiverUni.server_address, [file]);\n            setSpinnerMessage(\"\");\n            setShowToast(true);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const postToServer = async (address, data) => {\n        const response = await fetch(address, {\n            'method': \"POST\",\n            'headers': {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            'body': JSON.stringify(data),\n        });\n        console.log('Sent transcript to the foreign university server');\n        return response;\n    };\n\n    const onSendNow = async () => {\n        setSpinnerMessage(\"Sending transcripts..\");\n        await handleSendNow()\n        setSpinnerMessage(\"\");\n    };\n\n    return (\n        <container>\n            <Spinner message={spinnerMessage} />\n            <AppNavBar />\n\n            <h1 id=\"title2\">exChainge</h1>\n            <div id=\"subTitle2\">Upload your transcripts and send it to the exchange university easily and safely </div>\n\n            <div id=\"dropDown2\">\n                <DropzoneAreaBase onAdd={handleselectedFileDropzone} />\n                <p></p>\n                {uploadedFile !== null && receiverList !== null && (\n                    <>\n                        <h3>Uploaded file: {selectedFile.name}</h3>\n                        <SelectionList options={receiverList} selection={selectedUniIndex} setSelection={setSelectedUniIndex} />\n                    </>\n                )}\n                <p></p>\n                {selectedUniIndex !== -1 &&\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly' }}>\n                        <Button onClick={handleSendLater} style={{ backgroundColor: \"rgb(53, 110, 255)\" }} variant=\"contained\">Send Later</Button>\n                        <Button onClick={onSendNow} style={{ backgroundColor: \"rgb(53, 110, 255)\" }} variant=\"contained\">Send Now</Button>\n                    </div>\n                }\n            </div>\n\n            <Snackbar\n                open={showToast}\n                autoHideDuration={3000}\n                onClose={() => setShowToast(false)}\n                message=\"Transcript sent\"\n            />\n        </container>\n    );\n}\nexport default Upload;\n","/Users/bob/codes/mobility-blockchain-frontend/src/views/Timeline.js",["174","175","176","177","178","179","180"],"import React, { Component } from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect, useSelector} from \"react-redux\";\nimport Timeline from \"../component/Timeline\";\nimport TranscriptStatus from \"../component/TranscriptStatus\";\nimport { Container } from \"react-bootstrap\";\nimport { Theme } from \"../component/UI/Theme\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport AppNavBar from \"../component/AppNavBar\";\n\nconst TimeLine= (props) =>{\n    \nconst items = ['Upload transcript', 'Writing to chain', 'Transcript sent', 'Transcript Verified'];\n\nreturn(\n        <Container >\n            <AppNavBar></AppNavBar>\n            {/*<br />\n            <Timeline items = {items} step={4}/>\n            <br />*/}\n            <TranscriptStatus items = {items}/>\n        </Container>    \n\n  );\n }\n \nexport default TimeLine;","/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js",["181","182","183"],"import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Paper, Button, TextField, Typography } from \"@material-ui/core\";\nimport { verifyTranscript } from \"../services/blockchain/contractCalls\";\nimport { readInternalTranscriptsbyId } from \"../services/api\";\nimport Timeline from \"../component/Timeline\";\nimport hash from \"object-hash\";\n\nconst host = 'http://192.168.0.105:8545'\n/**\n * For transcript verification .\n * @param {props} props\n */\n\nfunction Verify(props) {\n    const [fakeTranscript, setTranscript] = React.useState(\"\");\n    const [activeStep, setActiveStep] = React.useState(0)\n    const [transcriptIndex, setTranscriptIndex] = React.useState(0);\n\n    const [openDialog, setOpenTimeline] = React.useState(false);\n    const isValid = () => {\n        if (openDialog) return 'VALID'\n        else return 'INVALID'\n    }\n    const steps = ['NOTVERIFIED', 'VERIFYING', isValid()]\n    const onChange = (e) => {\n        setTranscript(e.target.value);\n        setStatus(\"Not started\");\n    };\n    const [Status, setStatus] = React.useState(\"Not started\");\n    const onChangeStatus = (val) => {\n        setStatus(val);\n    };\n\n    const transcriptStored = {\n        studentName: \"test_student\",\n        subject: {\n            name: \"test_subject\",\n            grade: 2,\n        },\n    };\n\n    const handleSetTranscriptIndex = (e) => {\n        setTranscriptIndex(parseInt(e.target.value));\n    };\n\n\n    const handleVerifyTranscript = async () => {\n        const selectedFile = {}; // file the user selected\n        const index = selectedFile.index;\n        const files = [] // fetch all transcripts with the same index (SAME ORDER) sort the files by some value while fetching\n        const combinedHash = hash(files);\n        const isValid = await verifyTranscript(combinedHash, index);\n        // set each file in files as valid on backend\n\n\n        // onChangeStatus(\"Processing of transcript underway\");\n        // if (result) {\n        //     onChangeStatus(\"Processing of transcript Successful!!!\");\n        // }\n        // else {\n        //     onChangeStatus(\"Processing of transcript Failed :(\");\n        // }\n        return isValid;\n    }\n\n    const checkStatus = async () => {\n        const transcript = await readInternalTranscriptsbyId(localStorage.getItem('jwt'), '61ed43288536553efc2a3544');\n        const possibleSteps = ['NOTUPLOADED', 'UPLOADING', 'BATCHED', 'VALID', 'INVALID']\n        if (transcript) {\n            if (possibleSteps.includes(transcript.status_processing)) {\n                if (transcript.status_processing === 'VALID')\n                    await setActiveStep(3)\n                else if (transcript.status_processing === 'BATCHED')\n                    await setActiveStep(1)\n                else if (transcript.status_processing === 'INVALID')\n                    await setActiveStep(3)\n                await setOpenTimeline(true);\n\n                await onChangeStatus(transcript.status_processing + openDialog);\n\n            }\n            else\n                onChangeStatus(\"Failed to fetch a transcript\")\n        }\n        else\n            onChangeStatus(\"Failed to fetch a transcript\")\n    }\n\n    return (\n        <container>\n            <AppNavBar />\n            <div >\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    component=\"span\"\n                    onClick={checkStatus}\n                >Check Status\n                </Button>\n                <br />\n                {!openDialog ? (<br />) :\n                    (<Timeline step={activeStep} items={steps}></Timeline>)\n                }\n            </div>\n            <Grid id=\"iconsPosition\" container>\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <TextField\n                        label=\"Transcript\"\n                        fullWidth\n                        value={fakeTranscript}\n                        onChange={onChange}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        label=\"TranscriptIndex\"\n                        fullWidth\n                        value={transcriptIndex}\n                        onChange={handleSetTranscriptIndex}\n                    />\n                </div>\n\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        onClick={handleVerifyTranscript}\n                    >Verify Transcript\n                    </Button>\n                </div>\n                <Grid xs={1}> </Grid>\n\n                <div>\n                    <h3>Stored Tramscript : {JSON.stringify(transcriptStored)}</h3>\n                </div>\n                <Grid xs={1}> </Grid>\n                <div>\n                    <h3>Transcript Verification Status : {Status}</h3>\n                </div>\n            </Grid>\n        </container>\n    );\n}\n\nexport default connect()(withRouter(Verify));","/Users/bob/codes/mobility-blockchain-frontend/src/component/Timeline.js",["184","185","186","187","188","189","190","191","192"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport Grow from '@mui/material/Grow';\nimport StepLabel from '@mui/material/StepLabel';\nimport Check from '@mui/icons-material/Check';\nimport HourglassDisabledIcon from '@mui/icons-material/HourglassDisabled';\nimport DangerousIcon from '@mui/icons-material/Dangerous';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\nimport StepButton from '@mui/material/StepButton';\nimport Typography from '@mui/material/Typography';\n\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\n\n\n  [`&.${stepConnectorClasses.alternativeLabel}`]: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)',\n  },\n  [`&.${stepConnectorClasses.active}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      borderColor: 'rgb(53, 110, 255)'//'#784af4',\n    },\n  },\n  [`&.${stepConnectorClasses.completed}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      borderColor: 'rgb(53, 110, 255)',//'#784af4',\n    },\n  },\n  [`& .${stepConnectorClasses.line}`]: {\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n    borderTopWidth: 3,\n    borderRadius: 1,\n  },\n}));\n\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\n  color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\n  display: 'flex',\n  height: 22,\n  alignItems: 'center',\n  ...(ownerState.active && {\n    color: 'rgb(53, 110, 255)',//'#784af4',\n  }),\n  '& .QontoStepIcon-completedIcon': {\n    color: 'rgb(53, 110, 255)',//'#784af4',\n    zIndex: 1,\n    fontSize: 18,\n  },\n  '& .QontoStepIcon-circle': {\n    width: 8,\n    height: 8,\n    borderRadius: '50%',\n    backgroundColor: 'currentColor',\n  },\n}));\n\nfunction QontoStepIcon(props) {\n  const { active, completed, className } = props;\n\n  return (\n    <QontoStepIconRoot ownerState={{ active }} className={className}>\n      {completed ? (\n        <Check className=\"QontoStepIcon-completedIcon\" />\n      ) : (\n        <div className=\"QontoStepIcon-circle\" />\n      )}\n    </QontoStepIconRoot>\n  );\n}\n\nQontoStepIcon.propTypes = {\n  /**\n   * Whether this step is active.\n   * @default false\n   */\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Mark the step as completed. Is passed to child components.\n   * @default false\n   */\n  completed: PropTypes.bool,\n};\n\nconst ColorlibConnector = styled(StepConnector)(({ theme }) => ({\n  [`&.${stepConnectorClasses.alternativeLabel}`]: {\n    top: 22,\n  },\n  [`&.${stepConnectorClasses.active}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      backgroundImage:\n      'linear-gradient( 136deg, #07565e 0%, #097976 50%, #00d4ff 100%)',  \n      //'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    },\n  },\n  [`&.${stepConnectorClasses.completed}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      backgroundImage:\n      'linear-gradient( 136deg, #07565e 0%, #097976 50%, #00d4ff 100%)',  \n      //'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    },\n  },\n  [`& .${stepConnectorClasses.line}`]: {\n    height: 3,\n    border: 0,\n    backgroundColor:\n      theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n    borderRadius: 1,\n  },\n}));\n\nconst ColorlibStepIconRoot = styled('div')(({ theme, ownerState }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#ccc',\n  zIndex: 1,\n  color: '#fff',\n  width: 50,\n  height: 50,\n  display: 'flex',\n  borderRadius: '50%',\n  justifyContent: 'center',\n  alignItems: 'center',\n  ...(ownerState.active && {\n    backgroundImage:\n      'linear-gradient( 136deg, #07565e 0%, #097976 50%, #00d4ff 100%)',\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n  }),\n  ...(ownerState.completed && {\n    backgroundImage:'linear-gradient( 136deg, #07565e 0%, #097976 50%, #00d4ff 100%)',\n      //'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n  }),\n}));\n\nfunction ColorlibStepIcon(props) {\n  const { active, completed, className } = props;\n  const checkFinal = () =>{\n    if(props.icon==3 && props.completed)\n      return <DoneAllIcon/>\n    else\n      return <DangerousIcon/>\n  }\n  const icons = {\n    1: <HourglassDisabledIcon />,\n    2: <AutorenewIcon />,\n    3:  (props.icon==3 && props.completed)?<DoneAllIcon/>:<DangerousIcon></DangerousIcon> ,\n  };\n\n  return (\n    <ColorlibStepIconRoot ownerState={{ completed, active }} className={className}>\n      {icons[String(props.icon)]}\n    </ColorlibStepIconRoot>\n  );\n}\n\nColorlibStepIcon.propTypes = {\n  /**\n   * Whether this step is active.\n   * @default false\n   */\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Mark the step as completed. Is passed to child components.\n   * @default false\n   */\n  completed: PropTypes.bool,\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: PropTypes.node,\n};\n\nconst Timeline = (props) => {\n  const [activeStep, setActiveStep] = React.useState(props.step);\n  const [completed, setCompleted] = React.useState({});\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n  useEffect( () =>{\n    \n  }, [activeStep])\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n\n  return (\n    <Stack sx={{ width: '100%' }} spacing={4}>\n\n      {//<Stepper alternativeLabel activeStep={props.step} connector={<ColorlibConnector />}>\n      }\n      <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>\n        {props.items.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n          if (isStepOptional(index)) {\n            labelProps.optional = (\n              <Typography variant=\"caption\">Optional</Typography>\n            );\n          }\n          return(\n            <Grow in={true} {...(true ? { timeout: 500*index } : {})}>\n            <Step key={label} {...stepProps}>\n              <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\n            </Step>\n            </Grow>\n          )\n        })}\n      </Stepper>\n\n      {/*<Stepper  alternativeLabel nonLinear activeStep={activeStep} connector={<QontoConnector />}>\n        {props.items.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n        props.items.map((label, index) => {\n          const handleSteps = (e)=>{\n            setActiveStep(index)\n            e.preventDefault()\n          }\n          const stepProps = {};\n          const labelProps = {};\n          if (isStepOptional(index)) {\n            labelProps.optional = (\n              <Typography variant=\"caption\">Optional</Typography>\n            );\n          }\n          return(\n            <Step key={label} {...stepProps}>              \n              <StepButton  {...labelProps} color=\"inherit\" onClick={handleSteps}>\n                {label}\n              </StepButton>\n            </Step>\n          )\n          \n        })\n      </Stepper>\n      */}\n    </Stack>\n  );\n}\n\nexport default Timeline;","/Users/bob/codes/mobility-blockchain-frontend/src/auth/PrivateRoute.js",["193"],"import React, {Component} from \"react\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport {isAuthenticated} from \"./auth\";\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n// Example :- https://reactrouter.com/web/example/auth-workflow\n\nconst PrivateRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={props =>\n            isAuthenticated() ? (\n                <Component {...props} />\n            ) : (\n                <Redirect\n                    to={{\n                        pathname: \"/\",\n                        state: {from: props.location}\n                    }}\n                />\n            )\n        }\n    />\n);\n\nexport default PrivateRoute;","/Users/bob/codes/mobility-blockchain-frontend/src/auth/auth.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/TranscriptStatus.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/views/Explorer.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/views/VerifyView.js",["194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"import TranscriptCard from \"../component/TranscriptCard\";\nimport React, { useEffect, useState } from \"react\";\nimport DynamicCard from \"../component/DynamicCard\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from '@material-ui/core/Typography';\nimport transcriptIcon from \"../img/transcript_icon.jpg\";\nimport failedIcon from \"../img/failed.jpeg\";\nimport successIcon from \"../img/success.png\";\nimport {readExternalTranscripts, updateTranscriptStatus, readBatchedByIndex} from \"../services/api\"\nimport {verifyTranscript} from \"../services/blockchain/contractCalls\";\nimport { hashTranscriptBatch, hashTranscripts } from \"../utils/accountUtils\";\nimport hash from 'object-hash'\nimport { startService } from \"../services/blockchain/util\";\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: \"20px\",\n        paddingTop: '80px',\n    },\n    searchBarContainer: {\n        paddingTop: '80px'\n    },\n    box: {\n        // margin: '0 2px',\n        // paddingTop: '-10px',\n        marginTop: '10px',\n        paddingLeft: '0px',\n        marginRight: '10px',\n        paddingRight: '25px',\n        position: \"relative\",\n        height: \"75vh\",\n        overflow: \"scroll\"\n    },\n}));\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    backgroundColor: \"#c0d1fcac\",\n    color: theme.palette.text.secondary\n}));\n\n// const verifyTranscriptOnBlockchain = async (item) => {\n//     let verificationStatus = await verifyTranscript(item, item._id);\n// }\n\nconst VerifyView = () => {\n\n    const classes = useStyles();\n    const [pendingTranscriptsList2, setPendingTranscriptsList2] = useState([]);\n    const [compeletedTranscriptsList2, setCompeletedTranscriptsList2] = useState([]);\n    const [cardSelectedInPendingTranscripts, changeCardSelectedInPendingTranscripts] = useState(-1);\n    const [cardSelectedInApprovedTranscripts, changeCardSelectedInApprovedTranscripts] = useState(-1);\n    const [openDialog1, setOpenDialog1] = useState(false);\n    const [openDialog2, setOpenDialog2] = useState(false);\n    const [openDialog3, setOpenDialog3] = useState(false);\n    const [verifyRequestCompleted, setVerifyRequestCompleted] = useState(false);\n    const [pendingRequestsSearchString, setPendingRequestsSearchString] = useState(\"\");\n    const [completedRequestsSearchString, setCompletedRequestsSearchString] = useState(\"\");\n    const [transcriptsInCurrentBatch, setTranscriptsInCurrentBatch] = useState([]);\n    const [currentTranscriptIdx, changeTranscriptIdx] = useState({});\n\n\n    useEffect(async () => {\n        let token = localStorage.getItem('jwt');\n        let transcripts = await readExternalTranscripts(token);\n\n        setPendingTranscriptsList2([]);\n        setCompeletedTranscriptsList2([]);\n        let pendingTranscriptCount = 0;\n        let completedTranscriptCount = 0;\n        for (const transcript of transcripts) {\n\n            if(transcript.hasOwnProperty(\"status_processing\") && transcript.status_processing === \"NOT VALADATING\") {\n                if(completedRequestsSearchString.length > 0 ) {\n                    if(transcript.student_id.toLowerCase().startsWith( completedRequestsSearchString)) {\n                        transcript.id = pendingTranscriptCount;\n                        setPendingTranscriptsList2(pendingTranscriptsList2 => [...pendingTranscriptsList2, transcript]);\n                        pendingTranscriptCount++;\n                    }\n                } else {\n                    transcript.id = pendingTranscriptCount;\n                    setPendingTranscriptsList2(pendingTranscriptsList2 => [...pendingTranscriptsList2, transcript]);\n                    pendingTranscriptCount++;\n                }\n            } else {\n                if(completedRequestsSearchString.length > 0 ) {\n                    if(transcript.student_id.toLowerCase().startsWith( completedRequestsSearchString)) {\n                        transcript.id = completedTranscriptCount;\n                        setCompeletedTranscriptsList2( compeletedTranscriptsList2 => [...compeletedTranscriptsList2, transcript]);\n                        completedTranscriptCount++;\n                    }\n                } else {\n                    transcript.id = completedTranscriptCount;\n                    setCompeletedTranscriptsList2( compeletedTranscriptsList2 => [...compeletedTranscriptsList2, transcript]);\n                    completedTranscriptCount++;\n                }\n                \n            }\n        }\n        setVerifyRequestCompleted(false);\n\n        },[verifyRequestCompleted, pendingRequestsSearchString, completedRequestsSearchString]);\n\n\n    const clickHandler1 = (item) => (\n        changeCardSelectedInPendingTranscripts(item.id),\n            changeCardSelectedInApprovedTranscripts(-1),\n            setOpenDialog2(false),\n            setOpenDialog3(false),\n            setOpenDialog1(true),\n            getCountOftranscriptsInCurrentBatch(item),\n            changeTranscriptIdx(pendingTranscriptsList2[item.id])\n    );\n    const clickHandler2 = (item) => (\n        changeCardSelectedInApprovedTranscripts(item.id),\n        changeCardSelectedInPendingTranscripts(-1),\n        setOpenDialog1(false),\n        setOpenDialog3(false),\n        setOpenDialog2(true),\n        changeTranscriptIdx(compeletedTranscriptsList2[item.id])\n\n    );\n\n    const clickHandler3 = (item) => (\n        changeCardSelectedInApprovedTranscripts(item.id),\n        changeCardSelectedInPendingTranscripts(-1),\n        setOpenDialog1(false),\n        setOpenDialog2(false),\n        setOpenDialog3(true),\n        changeTranscriptIdx(compeletedTranscriptsList2[item.id])\n    );\n    \n\n\n    const handleClose = () => (\n        setOpenDialog1(false),\n        setOpenDialog2(false),\n        setOpenDialog3(false)\n    );\n    \n    const pendingRequestsSearcHandler = () => {\n        let elem = document.getElementById(\"pending-request-search\");\n        let value = elem.value;\n        if(value.length >= 3) {\n            setPendingRequestsSearchString(value);\n        } \n        if(value.length < 3) {\n            setPendingRequestsSearchString(\"\");\n        }\n    }\n\n    const completedRequestsSearcHandler = () => {\n        let elem = document.getElementById(\"completed-request-search\");\n        let value = elem.value;\n        if(value.length >= 3) {\n            setCompletedRequestsSearchString(value);\n        }\n        if(value.length < 3) {\n            setCompletedRequestsSearchString(\"\");\n        }\n    }\n\n    const getCountOftranscriptsInCurrentBatch = async (transcript) => {\n        let transcripts = await readBatchedByIndex(transcript.index, transcript.sending_university_username);\n        setTranscriptsInCurrentBatch(transcripts);\n    }\n    \n    const handleVerifyRequest = async (transcript) => {\n        //verifyRequest()\n        setOpenDialog1(false);\n            setOpenDialog2(false);\n            setOpenDialog3(false);\n\n        const combinedHash = hashTranscripts(transcriptsInCurrentBatch)\n\n        await startService();\n        let verificationStatus = await verifyTranscript(combinedHash, transcript.index);\n        if(verificationStatus===true) {\n            for(const currTranscript of transcriptsInCurrentBatch) {\n                updateTranscriptStatus(currTranscript._id, \"VERIFIED\", localStorage.getItem('jwt'));\n            }\n        } else {\n            for(const currTranscript of transcriptsInCurrentBatch) {\n                updateTranscriptStatus(currTranscript._id, \"INVALID\", localStorage.getItem('jwt'));\n            }\n        }\n        setVerifyRequestCompleted(true);\n        //Location().reload()\n    }\n\n\n    // const handleVerify = () => (\n    //\n    // );\n    return (\n        <Container>\n            <AppNavBar />\n\n            {/*<TextField id=\"standard-basic\" label=\"Student Id or University Name\" variant=\"standard\" />*/}\n            {/*<h2 style={{color : \"#356EFF\"}}>Verify Transcripts</h2>*/}\n            <Grid container xs={12} spacing={6} className={classes.searchBarContainer}>\n                \n                <Grid container item xs={12} spacing={4} direction=\"row\" justifyContent=\"flex-end\" alignItems=\"flex-start\">\n                    <p style={{marginTop: \"-20px\"}}>Search : </p>&nbsp;<TextField id=\"completed-request-search\" label=\"Student Id (min 3 chars)\" onKeyUp={() => completedRequestsSearcHandler()} style={{marginTop: \"-40px\", paddingRight: \"50px\"}} variant=\"filled\" size={\"small\"}/><br/>\n                </Grid>\n            </Grid>\n            <Grid container xs={12} spacing={6} className={classes.root}>\n                <Grid container item xs={6} spacing={4} className={classes.box} direction=\"row\" justifyContent=\"center\" alignItems={\"flex-start\"}>\n                    {/*Search By : <TextField id=\"standard-basic\" label=\"Student Id or Uni Name\" style={{marginTop: \"-40px\"}} variant=\"filled\" size={\"normal\"}/><br/>*/}\n                    <Grid item xs={12} style={{marginTop: \"-90px\"}}><h4 style={{color : \"#356EFF\"}}>Pending Requests ({pendingTranscriptsList2.length})</h4></Grid>\n                        {pendingTranscriptsList2.map((item => (\n                            <Grid item xs={4}>\n                                \n                                <Item onClick={() => clickHandler1(item)} ><img src={transcriptIcon} width=\"25\" height=\"35\"/><br/>{item.student_id} - {item.university}<br/>{item.semester}</Item>\n                                \n                            </Grid>\n                            )))}\n                    </Grid>\n                    <Grid container item xs={6} spacing={4} className={classes.box} direction=\"row\" justifyContent=\"center\" alignItems=\"flex-start\">\n                        <Grid item xs={12} style={{marginTop: \"-90px\"}}><h4 style={{color : \"#356EFF\"}}>Completed Requests({compeletedTranscriptsList2.length})</h4></Grid>\n                        {compeletedTranscriptsList2.map((item => item.status_processing === \"VERIFIED\"? (\n\n                            <Grid item xs={4}><Item onClick={() => clickHandler2(item)}><img src={successIcon} width=\"35\" height=\"35\"/><br/>{item.student_id} - {item.university}<br/>{item.semester}</Item></Grid>\n                        ) :\n                                (<Grid item xs={4}><Item onClick={() => clickHandler3(item)}><img src={failedIcon} width=\"35\" height=\"35\"/><br/>{item.student_id} - {item.university}<br/>{item.semester}</Item></Grid>)\n                        ))}\n                    </Grid>\n            </Grid>\n\n            <div>\n                <Dialog\n                    open={openDialog1}\n                    onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                    \n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {\"Verify Request\"}\n                    </DialogTitle>\n                    <DialogContent style={{minWidth : \"350px\"}}>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Student Id : {currentTranscriptIdx?.student_id} <br/>\n                            Semester : {currentTranscriptIdx?.semester} <br/>\n                            Sending University username: {currentTranscriptIdx?.sending_university_username} <br/>\n                            Receiving University username: {currentTranscriptIdx?.receiving_university_username} <br/>\n                            Transcripts in the batch : {transcriptsInCurrentBatch?.length} <br/><br/>\n                            **note: all the transcripts in a single batch <br/>\n                            will be sent for verification together<br/>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => handleClose()}>Close</Button>\n                        <Button onClick={() => handleVerifyRequest(currentTranscriptIdx)}>Verify Transcript(s)</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n\n            <div>\n                <Dialog\n                    open={openDialog2}\n                    onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {\"Successful Request\"}\n                    </DialogTitle>\n                    <DialogContent style={{minWidth : \"300px\"}}>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Student Id : {currentTranscriptIdx?.student_id} <br/>\n                            Semester : {currentTranscriptIdx?.semester} <br/>\n                            Sending University username: {currentTranscriptIdx?.sending_university_username} <br/>\n                            Receiving University username: {currentTranscriptIdx?.receiving_university_username} <br/>\n                            Status - Transcript Validated <br/>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => handleClose()}>Close</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n\n            <div>\n                <Dialog\n                    open={openDialog3}\n                    onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {\"Invalid Request\"}\n                    </DialogTitle>\n                    <DialogContent style={{minWidth : \"300px\"}}>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Student Id : {currentTranscriptIdx?.student_id} <br/>\n                            Semester : {currentTranscriptIdx?.semester} <br/>\n                            Sending University username: {currentTranscriptIdx?.sending_university_username} <br/>\n                            Receiving University username: {currentTranscriptIdx?.receiving_university_username} <br/>\n                            Status - Invalid Transcript<br/>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => handleClose()}>Close</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n\n        </Container>\n    );\n};\n\nexport default VerifyView;\n","/Users/bob/codes/mobility-blockchain-frontend/src/component/SelectionList.js",["213","214"],"import \"../App.css\";\nimport React from \"react\";\nimport { FormControl, InputLabel, Select, MenuItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport AssuredWorkloadIcon from '@mui/icons-material/AssuredWorkload';\n\nfunction SelectionList(props) {\n    const handleChange = (event) => {\n        props.setSelection(event.target.value);\n    };\n\n    return (\n        <FormControl fullWidth>\n            <InputLabel>Receiving university</InputLabel>\n            <Select\n                value={props.selection === -1 ? '' : props.selection}\n                label=\"Receiving University\"\n                onChange={handleChange}\n                MenuProps={{ style: { maxHeight: 200 } }}\n            >\n                {props.options.map((item, index) =>\n                    <MenuItem value={index} key={index}>\n                        <ListItemText>\n                            {item.partner_university}\n                        </ListItemText>\n                    </MenuItem>\n                )}\n            </Select>\n        </FormControl>\n    );\n}\nexport default SelectionList;","/Users/bob/codes/mobility-blockchain-frontend/src/component/TranscriptCard.js",["215","216","217","218","219"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport {Col, Row} from \"react-bootstrap\";\nimport Typography from '@material-ui/core/Typography';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport transcriptIcon from \"../img/transcript_icon.jpg\";\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        minHeight: 75,\n        paddingLeft: 5,\n        paddingRight: 5\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nexport default function TranscriptCard(props) {\n    const classes = useStyles();\n    const [color, changeColor] = useState();\n    //const [openDialog, setOpenDialog] = useState(false);\n    const clickHandler = () => (\n        props.onClick(props.item.id)\n\n        //console.log(props.item.id)\n    )\n    return (\n        <Card onClick={clickHandler} style={{maxWidth: 130}}>\n            <CardActionArea key={props.id} className={classes.root} style={{backgroundColor: props.color}}>\n                    \n                            <Col md={3} sm={3} xs={6}>\n                                <img src={transcriptIcon} width=\"25\" height=\"35\"/>\n                                <Col>\n                                    <Row >\n                                        {props.item.student_name} - {props.item.university_name}\n                                    </Row>\n                                    <Row >\n                                        {props.item.semester}\n                                    </Row>\n                                </Col>\n                            </Col>\n            </CardActionArea>\n        </Card>\n\n\n    );\n}","/Users/bob/codes/mobility-blockchain-frontend/src/component/DynamicCard.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/util.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/contractCalls.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/services/api.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/utils/accountUtils.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/nodeCalls.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/component/Spinner.js",[],"/Users/bob/codes/mobility-blockchain-frontend/src/views/BatchSend.js",["220","221"],"import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Container } from \"react-bootstrap\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { Typography, Grid, Container as MUIContainer } from '@mui/material';\nimport { getPartnerStats } from \"../services/api\";\nimport { isAuthenticated } from \"../auth/auth\";\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { setTranscriptsToNotBatched, readBatchedInternalTranscripts } from \"../services/api\";\nimport hash from \"object-hash\";\nimport { sendTranscript } from \"../services/blockchain/contractCalls\";\nimport { startService } from \"../services/blockchain/util\";\nimport SelectionList from \"../component/SelectionList\";\nimport { hashTranscriptBatch, hashTranscripts } from \"../utils/accountUtils\";\nimport Spinner from \"../component/Spinner\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        //height: '89vh',\n        display: 'flex',\n        justifyContent: 'start',\n        //backgroundColor: theme.palette.primary.light,\n\n    },\n    textField: {\n        width: '100%',\n    },\n    questionContainer: {\n        width: '70%',\n    },\n    questionSectionContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n\n    addQuestionIconContainer: {\n        display: 'flex',\n        height: '12rem',\n    },\n    circleIcon: {\n        display: 'box',\n    },\n    leftPane: {\n        width: '60%',\n        paddingTop: '4rem',\n        backgroundColor: 'white',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        border: '1px grey solid'\n    },\n    leftPaneSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    rightPane: {\n        width: '100%',\n        display: 'flex',\n        overflowY: 'scroll',\n        flexDirection: 'column',\n    },\n    rightPaneTop: {\n        height: '14.5rem',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: 'white',\n        border: '1px grey solid',\n        padding: '2rem'\n    },\n\n    modal: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: '15rem',\n        marginLeft: '30rem',\n        marginRight: '30rem',\n        minHeight: \"220px\",\n        width: \"40%\"\n    },\n    MenuItem: {\n        marginTop: \"30px\",\n    },\n    button: {\n        margin: \"2rem\",\n        justifyContent: 'center',\n    },\n    sectionListContainer: {\n        marginTop: '1rem',\n        height: '20rem',\n        width: '100%',\n        overflowY: 'scroll',\n    },\n    surveyListContainer: {\n        marginTop: '1rem',\n        height: '27.5rem',\n        width: '22rem',\n        overflowY: 'scroll',\n    },\n    surveyListItem: {\n        display: 'flex',\n        height: '4rem',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        '&:hover': {\n            backgroundColor: theme.palette.primary.light,\n            cursor: 'pointer',\n        },\n    },\n    sectionListItem: {\n        'display': 'flex',\n        'justifyContent': 'center',\n        'height': '4rem',\n        'width': '70%',\n        'marginBottom': '0.5rem',\n        'marginTop': '0.5rem',\n        'alignItems': 'center',\n        '&:hover': {\n            'backgroundColor': theme.palette.primary.light,\n            'cursor': 'pointer',\n        },\n    },\n    upload: {\n        display: 'flex',\n        marginTop: '0.5rem',\n        height: '9rem',\n        width: '75%',\n    },\n    createSurveyButton: {\n        display: 'flex',\n        height: '3rem',\n        width: '15rem',\n    },\n    centerDiv: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '1rem',\n    },\n    form: {\n        margin: '1rem',\n        width: '40%'\n    },\n    inline: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    chart: {\n        height: '250px',\n    }\n}));\n\nconst postToServer = async (address, data) => {\n    const response = await fetch(address, {\n        'method': \"POST\",\n        'headers': {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        'body': JSON.stringify(data),\n    });\n    console.log('Sent transcripts to the foreign university server');\n    return response;\n};\n\nconst BatchSend = (props) => {\n    const classes = useStyles();\n    const [partnerList, setPartnerList] = useState([]);\n    const [stats, setStats] = useState({});\n    const [batchedTranscripts, setBatchedTranscripts] = useState([]);\n    const [spinnerMessage, setSpinnerMessage] = React.useState(\"\");\n\n    const [selectedUniIndex, setSelectedUniIndex] = React.useState(-1);\n\n    const selectedUni = selectedUniIndex >= 0 ? partnerList[selectedUniIndex] : {};\n    const selectedUniName = selectedUniIndex >= 0 ? selectedUni.partner_university : \"all Universities\";\n\n    useEffect(() => {\n        setPartnerList(JSON.parse(localStorage.getItem('partnerUnis')));\n    }, []);\n\n    useEffect(() => {\n        const getStats = async () => {\n            setStats(await getPartnerStats(selectedUniName, isAuthenticated()));\n        };\n        const updateBatchedTranscripts = async () => {\n            setBatchedTranscripts(await readBatchedInternalTranscripts(isAuthenticated(), selectedUniName)); //receiverUni\n        };\n\n        getStats();\n        updateBatchedTranscripts();\n    }, [selectedUniName]);\n\n    const handleSendBatchedTranscripts = async () => {\n        console.log(`Sending batched transcripts to ${selectedUniName}`);\n\n        const token = isAuthenticated();\n\n        const combinedHash = hashTranscripts(batchedTranscripts);\n\n        await startService();\n\n        try {\n            const index = await sendTranscript(combinedHash, selectedUni.blockchain_address);//\n            for (var file of batchedTranscripts) {\n                console.log('file', file);\n                file.index = index;\n            }\n            await postToServer(selectedUni.server_address, batchedTranscripts);\n            await setTranscriptsToNotBatched(token, selectedUniName);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const onSend = async () => {\n        setSpinnerMessage(\"Sending transcripts..\");\n        await handleSendBatchedTranscripts()\n        setSpinnerMessage(\"\");\n    };\n\n    return (\n        <Container>\n            <Spinner message={spinnerMessage} />\n\n            <AppNavBar></AppNavBar>\n\n            <MUIContainer maxWidth='sm' sx={{ mt: 5 }}>\n                <Typography sx={{ mb: 1 }}>\n                    Select a university to see some interaction statistics\n                </Typography>\n                <SelectionList options={partnerList} selection={selectedUniIndex} setSelection={setSelectedUniIndex} />\n                <Typography variant=\"h4\" style={{ textAlign: 'center', marginTop: 50 }}>Interaction with {selectedUniName}</Typography>\n            </MUIContainer>\n\n            <Grid container spacing={2} sx={{ mt: 10 }}>\n                <Grid item xs={6}>\n                    {stats.sent !== 0 || stats.recieved !== 0 ?\n                        <PieChart\n                            className={classes.chart}\n                            animate={true}\n                            label={({ dataEntry }) => dataEntry.value === 0 ? '' : `${dataEntry.title}: ${dataEntry.value}`}\n                            labelStyle={{ fontSize: '35%' }}\n                            data={[\n                                { title: 'Sent', value: stats.sent, color: '#E38627' },\n                                { title: 'Received', value: stats.recieved, color: '#C13C37' }\n                            ]}\n                        />\n                        : <Typography align=\"center\">No transcripts have been exchanged yet</Typography>\n                    }\n                </Grid>\n\n                <Grid item xs={6}>\n                    {selectedUniIndex >= 0 &&\n                        <div className={classes.questionSectionContainer}>\n                            <Typography>Number of batched transcripts: {batchedTranscripts.length}</Typography>\n                            <Button\n                                style={{ backgroundColor: \"rgb(53, 110, 255)\" }}\n                                variant=\"contained\"\n                                onClick={onSend}\n                                disabled={batchedTranscripts.length === 0}\n                            > Send Batched Transcripts\n                            </Button>\n                        </div>\n                    }\n                    {selectedUniIndex < 0 &&\n                        <div className={classes.questionSectionContainer}>\n                            <Typography>Number of partner universities: {partnerList.length}</Typography>\n                        </div>\n                    }\n                </Grid>\n            </Grid>\n        </Container>\n    );\n};\n\nexport default connect()(withRouter(BatchSend));","/Users/bob/codes/mobility-blockchain-frontend/src/component/AccountButton.js",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":26},{"ruleId":"222","replacedBy":"230"},{"ruleId":"224","replacedBy":"231"},{"ruleId":"226","severity":1,"message":"232","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":18},{"ruleId":"226","severity":1,"message":"227","line":4,"column":17,"nodeType":"228","messageId":"229","endLine":4,"endColumn":26},{"ruleId":"222","replacedBy":"233"},{"ruleId":"224","replacedBy":"234"},{"ruleId":"226","severity":1,"message":"235","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":14},{"ruleId":"226","severity":1,"message":"236","line":2,"column":16,"nodeType":"228","messageId":"229","endLine":2,"endColumn":24},{"ruleId":"226","severity":1,"message":"237","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":17},{"ruleId":"226","severity":1,"message":"238","line":4,"column":10,"nodeType":"228","messageId":"229","endLine":4,"endColumn":19},{"ruleId":"226","severity":1,"message":"239","line":12,"column":8,"nodeType":"228","messageId":"229","endLine":12,"endColumn":16},{"ruleId":"226","severity":1,"message":"240","line":8,"column":8,"nodeType":"228","messageId":"229","endLine":8,"endColumn":22},{"ruleId":"226","severity":1,"message":"241","line":23,"column":26,"nodeType":"228","messageId":"229","endLine":23,"endColumn":41},{"ruleId":"226","severity":1,"message":"227","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":26},{"ruleId":"226","severity":1,"message":"242","line":2,"column":9,"nodeType":"228","messageId":"229","endLine":2,"endColumn":19},{"ruleId":"226","severity":1,"message":"237","line":3,"column":9,"nodeType":"228","messageId":"229","endLine":3,"endColumn":16},{"ruleId":"226","severity":1,"message":"243","line":3,"column":18,"nodeType":"228","messageId":"229","endLine":3,"endColumn":29},{"ruleId":"226","severity":1,"message":"239","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":16},{"ruleId":"226","severity":1,"message":"244","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":15},{"ruleId":"226","severity":1,"message":"245","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":23},{"ruleId":"226","severity":1,"message":"246","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":15},{"ruleId":"226","severity":1,"message":"247","line":6,"column":36,"nodeType":"228","messageId":"229","endLine":6,"endColumn":46},{"ruleId":"226","severity":1,"message":"248","line":12,"column":7,"nodeType":"228","messageId":"229","endLine":12,"endColumn":11},{"ruleId":"226","severity":1,"message":"249","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"250","line":15,"column":8,"nodeType":"228","messageId":"229","endLine":15,"endColumn":18},{"ruleId":"226","severity":1,"message":"251","line":18,"column":7,"nodeType":"228","messageId":"229","endLine":18,"endColumn":21},{"ruleId":"226","severity":1,"message":"252","line":142,"column":9,"nodeType":"228","messageId":"229","endLine":142,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":143,"column":18,"nodeType":"255","messageId":"256","endLine":143,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":151,"column":20,"nodeType":"255","messageId":"256","endLine":151,"endColumn":22},{"ruleId":"226","severity":1,"message":"257","line":181,"column":21,"nodeType":"228","messageId":"229","endLine":181,"endColumn":33},{"ruleId":"226","severity":1,"message":"258","line":182,"column":9,"nodeType":"228","messageId":"229","endLine":182,"endColumn":23},{"ruleId":"226","severity":1,"message":"259","line":189,"column":9,"nodeType":"228","messageId":"229","endLine":189,"endColumn":19},{"ruleId":"226","severity":1,"message":"227","line":1,"column":16,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"260","line":1,"column":8,"nodeType":"228","messageId":"229","endLine":1,"endColumn":22},{"ruleId":"226","severity":1,"message":"261","line":3,"column":8,"nodeType":"228","messageId":"229","endLine":3,"endColumn":19},{"ruleId":"226","severity":1,"message":"262","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":13},{"ruleId":"226","severity":1,"message":"263","line":5,"column":15,"nodeType":"228","messageId":"229","endLine":5,"endColumn":18},{"ruleId":"226","severity":1,"message":"264","line":15,"column":8,"nodeType":"228","messageId":"229","endLine":15,"endColumn":11},{"ruleId":"226","severity":1,"message":"247","line":18,"column":8,"nodeType":"228","messageId":"229","endLine":18,"endColumn":18},{"ruleId":"226","severity":1,"message":"265","line":24,"column":10,"nodeType":"228","messageId":"229","endLine":24,"endColumn":29},{"ruleId":"226","severity":1,"message":"266","line":25,"column":8,"nodeType":"228","messageId":"229","endLine":25,"endColumn":12},{"ruleId":"226","severity":1,"message":"267","line":65,"column":12,"nodeType":"228","messageId":"229","endLine":65,"endColumn":44},{"ruleId":"226","severity":1,"message":"268","line":66,"column":12,"nodeType":"228","messageId":"229","endLine":66,"endColumn":45},{"ruleId":"269","severity":1,"message":"270","line":77,"column":15,"nodeType":"271","endLine":116,"endColumn":10},{"ruleId":"272","severity":1,"message":"273","line":120,"column":56,"nodeType":"274","messageId":"275","endLine":120,"endColumn":57},{"ruleId":"272","severity":1,"message":"273","line":129,"column":57,"nodeType":"274","messageId":"275","endLine":129,"endColumn":58},{"ruleId":"272","severity":1,"message":"273","line":139,"column":57,"nodeType":"274","messageId":"275","endLine":139,"endColumn":58},{"ruleId":"272","severity":1,"message":"273","line":150,"column":30,"nodeType":"274","messageId":"275","endLine":150,"endColumn":31},{"ruleId":"226","severity":1,"message":"276","line":155,"column":11,"nodeType":"228","messageId":"229","endLine":155,"endColumn":38},{"ruleId":"277","severity":1,"message":"278","line":228,"column":76,"nodeType":"279","endLine":228,"endColumn":126},{"ruleId":"277","severity":1,"message":"278","line":237,"column":89,"nodeType":"279","endLine":237,"endColumn":136},{"ruleId":"277","severity":1,"message":"278","line":239,"column":94,"nodeType":"279","endLine":239,"endColumn":140},{"ruleId":"226","severity":1,"message":"280","line":3,"column":53,"nodeType":"228","messageId":"229","endLine":3,"endColumn":65},{"ruleId":"226","severity":1,"message":"281","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":27},{"ruleId":"226","severity":1,"message":"282","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":17},{"ruleId":"226","severity":1,"message":"247","line":6,"column":8,"nodeType":"228","messageId":"229","endLine":6,"endColumn":18},{"ruleId":"226","severity":1,"message":"283","line":29,"column":12,"nodeType":"228","messageId":"229","endLine":29,"endColumn":17},{"ruleId":"226","severity":1,"message":"284","line":29,"column":19,"nodeType":"228","messageId":"229","endLine":29,"endColumn":30},{"ruleId":"277","severity":1,"message":"278","line":41,"column":33,"nodeType":"279","endLine":41,"endColumn":83},{"ruleId":"226","severity":1,"message":"266","line":13,"column":8,"nodeType":"228","messageId":"229","endLine":13,"endColumn":12},{"ruleId":"226","severity":1,"message":"265","line":17,"column":10,"nodeType":"228","messageId":"229","endLine":17,"endColumn":29},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["285"],["286"],"'Checkbox' is defined but never used.",["285"],["286"],"'Link' is defined but never used.","'Redirect' is defined but never used.","'connect' is defined but never used.","'PropTypes' is defined but never used.","'Timeline' is defined but never used.","'UploadFileIcon' is defined but never used.","'setReceiverList' is assigned a value but never used.","'withRouter' is defined but never used.","'useSelector' is defined but never used.","'Theme' is defined but never used.","'ThemeProvider' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'host' is assigned a value but never used.","'useState' is defined but never used.","'StepButton' is defined but never used.","'QontoConnector' is assigned a value but never used.","'checkFinal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setCompleted' is assigned a value but never used.","'completedSteps' is assigned a value but never used.","'handleStep' is assigned a value but never used.","'TranscriptCard' is defined but never used.","'DynamicCard' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Box' is defined but never used.","'hashTranscriptBatch' is defined but never used.","'hash' is defined but never used.","'cardSelectedInPendingTranscripts' is assigned a value but never used.","'cardSelectedInApprovedTranscripts' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'pendingRequestsSearcHandler' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ListItemIcon' is defined but never used.","'AssuredWorkloadIcon' is defined but never used.","'CardMedia' is defined but never used.","'color' is assigned a value but never used.","'changeColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]