{"ast":null,"code":"import { readUser, userLogin, registerUser, updatePartnerUnis } from \"../../api\";\nimport { authenticate } from \"../../auth/auth\";\nexport function signup(username, publicAddress, serverAddress) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"SIGNUP_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"SIGNUP_FAILURE\",\n      error\n    };\n  }\n\n  function onUserAlreadyExists(error) {\n    return {\n      type: \"SIGNUP_USER_EXISTS\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const user = await readUser(publicAddress);\n\n      if (username !== user.username) {\n        const data = await registerUser(publicAddress, username, serverAddress);\n        dispatch(onSuccess({\n          username: data.username,\n          metamask_address: data.metamask_address\n        }));\n        authenticate(data);\n      } else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserAlreadyExists(e));\n      }\n    }\n  };\n}\nexport function login(username, signData) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"LOGIN_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"LOGIN_FAILURE\",\n      error\n    };\n  }\n\n  function onUserNotFound(error) {\n    return {\n      type: \"LOGIN_USER_NOT_FOUND\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const data = await userLogin(signData.publicAddress, signData.signature);\n      const {\n        user\n      } = data;\n      const resp = user.metamask_address.toLowerCase() === signData.publicAddress.toLowerCase();\n\n      if (resp) {\n        dispatch(onSuccess({\n          username: user.username,\n          metamask_address: user.metamask_address\n        }));\n        authenticate(data);\n      } else dispatch(onUserNotFound(\"User not present\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserNotFound(e));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js"],"names":["readUser","userLogin","registerUser","updatePartnerUnis","authenticate","signup","username","publicAddress","serverAddress","onSuccess","user","console","log","type","onFailure","error","onUserAlreadyExists","dispatch","data","metamask_address","e","login","signData","onUserNotFound","signature","resp","toLowerCase"],"mappings":"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","sourcesContent":["import { readUser, userLogin, registerUser, updatePartnerUnis } from \"../../api\";\nimport { authenticate } from \"../../auth/auth\"\n\nexport function signup(username, publicAddress, serverAddress) {\n    function onSuccess(user) {\n        console.log(\"Success\" + user);\n        return { type: \"SIGNUP_SUCCESS\", user };\n    }\n\n    function onFailure(error) {\n        return { type: \"SIGNUP_FAILURE\", error };\n    }\n\n    function onUserAlreadyExists(error) {\n        return { type: \"SIGNUP_USER_EXISTS\", error };\n    }\n\n    return async (dispatch) => {\n        try {\n            const user = await readUser(publicAddress);\n            if (username !== user.username) {\n                const data = await registerUser(publicAddress, username, serverAddress);\n                dispatch(onSuccess({ username: data.username,metamask_address:data.metamask_address,  }));\n                authenticate(data);\n            } else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e));\n            } else {\n                dispatch(onUserAlreadyExists(e));\n            }\n        }\n    };\n}\n\nexport function login(username, signData) {\n    function onSuccess(user) {\n        console.log(\"Success\" + user);\n        return { type: \"LOGIN_SUCCESS\", user };\n    }\n\n    function onFailure(error) {\n        return { type: \"LOGIN_FAILURE\", error };\n    }\n\n    function onUserNotFound(error) {\n        return { type: \"LOGIN_USER_NOT_FOUND\", error };\n    }\n\n    return async (dispatch) => {\n        try {\n            const data = await userLogin(\n                signData.publicAddress,\n                signData.signature\n            );\n            const {user} = data;\n            const resp =\n                user.metamask_address.toLowerCase() ===\n                signData.publicAddress.toLowerCase();\n            if (resp){ \n                dispatch(onSuccess({ username: user.username, metamask_address:user.metamask_address  }));\n                authenticate(data);\n            }else dispatch(onUserNotFound(\"User not present\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e));\n            } else {\n                dispatch(onUserNotFound(e));\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}