{"ast":null,"code":"import { readUser, userLogin, registerUser } from '../../api';\nexport function signup(username, publicAddress) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"SIGNUP_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"SIGNUP_FAILURE\",\n      error\n    };\n  }\n\n  function onUserAlreadyExists(error) {\n    return {\n      type: \"SIGNUP_USER_EXISTS\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const user = await readUser(publicAddress);\n\n      if (username !== user.username) {\n        const data = await registerUser(publicAddress, username);\n        dispatch(onSuccess({\n          username: data.username\n        }));\n      } else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserAlreadyExists(e));\n      }\n    }\n  };\n}\nexport function login(username, signData) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"LOGIN_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"LOGIN_FAILURE\",\n      error\n    };\n  }\n\n  function onUserNotFound(error) {\n    return {\n      type: \"LOGIN_USER_NOT_FOUND\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const user = await userLogin(signData.publicAddress, signData.signature);\n      const resp = user.metamask_address.toLowerCase() === signData.publicAddress.toLowerCase();\n      if (resp) dispatch(onSuccess({\n        username: username\n      }));else dispatch(onUserNotFound(\"User not present\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserNotFound(e));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js"],"names":["readUser","userLogin","registerUser","signup","username","publicAddress","onSuccess","user","console","log","type","onFailure","error","onUserAlreadyExists","dispatch","data","e","login","signData","onUserNotFound","signature","resp","metamask_address","toLowerCase"],"mappings":"AAAA,SAAUA,QAAV,EAAmBC,SAAnB,EAA6BC,YAA7B,QAAkD,WAAlD;AAEA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,aAA1B,EAAyC;AAC5C,WAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUF,IAAtB;AACA,WAAO;AAACG,MAAAA,IAAI,EAAE,gBAAP;AAAyBH,MAAAA;AAAzB,KAAP;AACH;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAACF,MAAAA,IAAI,EAAE,gBAAP;AAAyBE,MAAAA;AAAzB,KAAP;AACH;;AAED,WAASC,mBAAT,CAA6BD,KAA7B,EAAoC;AAChC,WAAO;AAACF,MAAAA,IAAI,EAAE,oBAAP;AAA6BE,MAAAA;AAA7B,KAAP;AACH;;AAED,SAAO,MAAOE,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMP,IAAI,GAAG,MAAMP,QAAQ,CAACK,aAAD,CAA3B;;AACA,UAAGD,QAAQ,KAAKG,IAAI,CAACH,QAArB,EAA+B;AAC3B,cAAMW,IAAI,GAAG,MAAMb,YAAY,CAACG,aAAD,EAAeD,QAAf,CAA/B;AACAU,QAAAA,QAAQ,CAACR,SAAS,CAAC;AAACF,UAAAA,QAAQ,EAAEW,IAAI,CAACX;AAAhB,SAAD,CAAV,CAAR;AACH,OAHD,MAIKU,QAAQ,CAACD,mBAAmB,CAAC,0BAAD,CAApB,CAAR;AACR,KAPD,CAOE,OAAOG,CAAP,EAAU;AACR,UAAIA,CAAC,KAAK,GAAV,EAAe;AACXF,QAAAA,QAAQ,CAACH,SAAS,CAACK,CAAD,CAAV,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACD,mBAAmB,CAACG,CAAD,CAApB,CAAR;AACH;AACJ;AACJ,GAfD;AAgBH;AAGD,OAAO,SAASC,KAAT,CAAeb,QAAf,EAAyBc,QAAzB,EAAmC;AACtC,WAASZ,SAAT,CAAmBC,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUF,IAAtB;AACA,WAAO;AAACG,MAAAA,IAAI,EAAE,eAAP;AAAwBH,MAAAA;AAAxB,KAAP;AACH;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAACF,MAAAA,IAAI,EAAE,eAAP;AAAwBE,MAAAA;AAAxB,KAAP;AACH;;AAED,WAASO,cAAT,CAAwBP,KAAxB,EAA+B;AAC3B,WAAO;AAACF,MAAAA,IAAI,EAAE,sBAAP;AAA+BE,MAAAA;AAA/B,KAAP;AACH;;AAED,SAAO,MAAOE,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMP,IAAI,GAAG,MAAMN,SAAS,CAACiB,QAAQ,CAACb,aAAV,EAAwBa,QAAQ,CAACE,SAAjC,CAA5B;AACA,YAAMC,IAAI,GAAId,IAAI,CAACe,gBAAL,CAAsBC,WAAtB,OAAwCL,QAAQ,CAACb,aAAT,CAAuBkB,WAAvB,EAAtD;AACA,UAAGF,IAAH,EAASP,QAAQ,CAACR,SAAS,CAAC;AAACF,QAAAA,QAAQ,EAAEA;AAAX,OAAD,CAAV,CAAR,CAAT,KACKU,QAAQ,CAACK,cAAc,CAAC,kBAAD,CAAf,CAAR;AACR,KALD,CAKE,OAAOH,CAAP,EAAU;AACR,UAAIA,CAAC,KAAK,GAAV,EAAe;AACXF,QAAAA,QAAQ,CAACH,SAAS,CAACK,CAAD,CAAV,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACK,cAAc,CAACH,CAAD,CAAf,CAAR;AACH;AACJ;AACJ,GAbD;AAcH","sourcesContent":["import  { readUser,userLogin,registerUser }  from '../../api'\n\nexport function signup(username, publicAddress) {\n    function onSuccess(user) {\n        console.log(\"Success\"+user);\n        return {type: \"SIGNUP_SUCCESS\", user};\n    }\n\n    function onFailure(error) {\n        return {type: \"SIGNUP_FAILURE\", error};\n    }\n\n    function onUserAlreadyExists(error) {\n        return {type: \"SIGNUP_USER_EXISTS\", error};\n    }\n\n    return async (dispatch) => {\n        try {\n            const user = await readUser(publicAddress)\n            if(username !== user.username) {\n                const data = await registerUser(publicAddress,username)\n                dispatch(onSuccess({username: data.username}))\n            }\n            else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e))\n            } else {\n                dispatch(onUserAlreadyExists(e))\n            }\n        }\n    };\n}\n\n\nexport function login(username, signData) {\n    function onSuccess(user) {\n        console.log(\"Success\"+user);\n        return {type: \"LOGIN_SUCCESS\", user};\n    }\n\n    function onFailure(error) {\n        return {type: \"LOGIN_FAILURE\", error};\n    }\n\n    function onUserNotFound(error) {\n        return {type: \"LOGIN_USER_NOT_FOUND\", error};\n    }\n\n    return async (dispatch) => {\n        try {\n            const user = await userLogin(signData.publicAddress,signData.signature)\n            const resp = (user.metamask_address.toLowerCase() === signData.publicAddress.toLowerCase())\n            if(resp) dispatch(onSuccess({username: username}));\n            else dispatch(onUserNotFound(\"User not present\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e))\n            } else {\n                dispatch(onUserNotFound(e))\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}