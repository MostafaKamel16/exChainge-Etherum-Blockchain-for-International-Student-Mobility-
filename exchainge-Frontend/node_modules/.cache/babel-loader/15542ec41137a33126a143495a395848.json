{"ast":null,"code":"var _jsxFileName = \"/Users/bob/codes/mobility-blockchain-frontend/src/views/SignupView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Container, Col } from \"react-bootstrap\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { signup } from \"../redux/action/userAction\";\nimport SignupComponent from \"../component/SignupComponent\";\nimport { Theme } from \"../component/UI/Theme\";\nimport { registerAccount } from \"../services/blockchain/contractCalls\";\nimport { getCurrentAccount, startService } from \"../services/blockchain/util\";\nimport { fundAccount } from \"../utils/accountUtils\";\n/**\n * For user login\n * @param {props} props\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignupView(props) {\n  _s();\n\n  const userData = useSelector(state => state.user);\n  useEffect(() => {\n    var _userData$user;\n\n    if (userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.username) {\n      props.history.push(\"/upolad\");\n    }\n  }, [userData, props.history]);\n\n  const onSignUp = async (username, serverAddress) => {\n    // make sure metamask is open\n    await startService();\n    const account = getCurrentAccount();\n\n    try {\n      await fundAccount(); // ensure account has enough funds\n\n      await registerAccount(username, serverAddress);\n      props.dispatch(signup(username, account, serverAddress)); // store account locally\n    } catch (e) {\n      console.log(e); // TODO not catching\n    }\n  };\n\n  const onCancel = () => {\n    props.history.push(\"/\");\n  };\n\n  const onLogin = () => {\n    props.history.push(\"/login\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: Theme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Landing\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"center\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(SignupComponent, {\n              user: userData.user,\n              onLogin: onLogin,\n              onCancel: onCancel,\n              onSignup: onSignUp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SignupView, \"ireqX3p4NhykT1j4QxORlFVTpwA=\", false, function () {\n  return [useSelector];\n});\n\n_c = SignupView;\nexport default connect()(withRouter(SignupView));\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupView\");","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/views/SignupView.js"],"names":["React","useEffect","withRouter","connect","useSelector","Container","Col","ThemeProvider","signup","SignupComponent","Theme","registerAccount","getCurrentAccount","startService","fundAccount","SignupView","props","userData","state","user","username","history","push","onSignUp","serverAddress","account","dispatch","e","console","log","onCancel","onLogin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,6BAAhD;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA;AACA;AACA;AACA;;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAMC,QAAQ,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA5B;AACAlB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,QAAIgB,QAAJ,aAAIA,QAAJ,yCAAIA,QAAQ,CAAEE,IAAd,mDAAI,eAAgBC,QAApB,EAA8B;AAC1BJ,MAAAA,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmB,SAAnB;AACH;AACJ,GAJQ,EAIN,CAACL,QAAD,EAAWD,KAAK,CAACK,OAAjB,CAJM,CAAT;;AAMA,QAAME,QAAQ,GAAG,OAAOH,QAAP,EAAiBI,aAAjB,KAAmC;AAChD;AACA,UAAMX,YAAY,EAAlB;AAEA,UAAMY,OAAO,GAAGb,iBAAiB,EAAjC;;AAEA,QAAI;AACA,YAAME,WAAW,EAAjB,CADA,CACqB;;AACrB,YAAMH,eAAe,CAACS,QAAD,EAAWI,aAAX,CAArB;AACAR,MAAAA,KAAK,CAACU,QAAN,CAAelB,MAAM,CAACY,QAAD,EAAWK,OAAX,EAAoBD,aAApB,CAArB,EAHA,CAG0D;AAC7D,KAJD,CAIE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADQ,CACQ;AACnB;AACJ,GAbD;;AAeA,QAAMG,QAAQ,GAAG,MAAM;AACnBd,IAAAA,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH,GAFD;;AAGA,QAAMS,OAAO,GAAG,MAAM;AAClBf,IAAAA,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AACH,GAFD;;AAIA,sBACI,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEZ,KAAtB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI,QAAC,SAAD;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,GAAD;AAAA,mCACI,QAAC,eAAD;AACI,cAAA,IAAI,EAAEO,QAAQ,CAACE,IADnB;AAEI,cAAA,OAAO,EAAEY,OAFb;AAGI,cAAA,QAAQ,EAAED,QAHd;AAII,cAAA,QAAQ,EAAEP;AAJd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAUI;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAlDQR,U;UACYX,W;;;KADZW,U;AAoDT,eAAeZ,OAAO,GAAGD,UAAU,CAACa,UAAD,CAAb,CAAtB","sourcesContent":["import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Container, Col } from \"react-bootstrap\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { signup } from \"../redux/action/userAction\";\nimport SignupComponent from \"../component/SignupComponent\";\nimport { Theme } from \"../component/UI/Theme\";\nimport { registerAccount } from \"../services/blockchain/contractCalls\";\nimport { getCurrentAccount, startService } from \"../services/blockchain/util\";\nimport { fundAccount } from \"../utils/accountUtils\";\n\n/**\n * For user login\n * @param {props} props\n */\n\nfunction SignupView(props) {\n    const userData = useSelector((state) => state.user);\n    useEffect(() => {\n        if (userData?.user?.username) {\n            props.history.push(\"/upolad\");\n        }\n    }, [userData, props.history]);\n\n    const onSignUp = async (username, serverAddress) => {\n        // make sure metamask is open\n        await startService();\n\n        const account = getCurrentAccount();\n\n        try {\n            await fundAccount(); // ensure account has enough funds\n            await registerAccount(username, serverAddress);\n            props.dispatch(signup(username, account, serverAddress)); // store account locally\n        } catch (e) {\n            console.log(e); // TODO not catching\n        }\n    };\n\n    const onCancel = () => {\n        props.history.push(\"/\");\n    };\n    const onLogin = () => {\n        props.history.push(\"/login\");\n    };\n\n    return (\n        <ThemeProvider theme={Theme}>\n            <div className=\"Landing\">\n                <Container>\n                    <center>\n                        <br />\n                        <Col>\n                            <SignupComponent\n                                user={userData.user}\n                                onLogin={onLogin}\n                                onCancel={onCancel}\n                                onSignup={onSignUp}\n                            />\n                        </Col>\n                        <br />\n                    </center>\n                </Container>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default connect()(withRouter(SignupView));\n"]},"metadata":{},"sourceType":"module"}