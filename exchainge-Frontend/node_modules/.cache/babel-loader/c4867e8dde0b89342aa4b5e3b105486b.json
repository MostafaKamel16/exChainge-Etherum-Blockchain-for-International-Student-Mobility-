{"ast":null,"code":"var _jsxFileName = \"/Users/bob/codes/mobility-blockchain-frontend/src/views/Upload.js\",\n    _s = $RefreshSig$();\n\nimport UploadFileIcon from \"@mui/icons-material/UploadFile\";\nimport \"../App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@mui/material\";\nimport React, { Component } from \"react\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport axios from 'axios';\nimport SendIcon from '@mui/icons-material/Send';\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\nimport SelectionList from \"../component/SelectionList\";\nimport { setTranscriptsToNotBatched, readPartnerUni, storeInternalTranscripts, readInternalTranscripts, readBatchedInternalTranscripts } from \"../services/api\";\nimport Snackbar from '@mui/material/Snackbar';\nimport { sendTranscript } from \"../services/blockchain/contractCalls\";\nimport { getCurrentAccount, startService } from \"../services/blockchain/util\";\nimport { hashTranscripts } from \"../utils/accountUtils\";\nimport Spinner from \"../component/Spinner\";\nimport hash from \"object-hash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Upload(props) {\n  _s();\n\n  const [selectedUniIndex, setSelectedUniIndex] = React.useState(-1);\n  const [showToast, setShowToast] = React.useState(false);\n  const [uploadedFile, setUploadedFile] = React.useState(null);\n  const [selectedFile, setSelectedFile] = React.useState({});\n  const [receiverList, setReceiverList] = React.useState(JSON.parse(localStorage.getItem('partnerUnis')));\n  const [spinnerMessage, setSpinnerMessage] = React.useState(\"\");\n\n  const handleselectedFileDropzone = async event => {\n    console.log(event[0].file);\n    var file = event[0].file;\n    var reader = new FileReader();\n\n    reader.onload = async event => {\n      console.log(event.target.result);\n      setUploadedFile(event.target.result);\n    };\n\n    reader.readAsText(file);\n    setSelectedFile(event[0].file);\n  };\n\n  const handleSendLater = async () => {\n    const file = JSON.parse(uploadedFile);\n    file.batched = true;\n    await storeInternalTranscripts([file]);\n    console.log(\"Stored transcript locally\");\n    setShowToast(true);\n  };\n\n  const handleSendNow = async () => {\n    const receiverUni = receiverList[selectedUniIndex];\n    await startService();\n    const transcriptHash = hashTranscripts(uploadedFile); // const server = receiverUni.serverAddress;\n\n    const myserver = \"http://localhost:4003/transcript/create\";\n\n    try {\n      const index = await sendTranscript(transcriptHash, receiverUni.blockchain_address);\n      const file = JSON.parse(uploadedFile);\n      file.index = index;\n      console.log('file', file);\n      await storeInternalTranscripts([file]);\n      setSpinnerMessage(\"Sending file...\");\n      await postToServer(myserver, [file]);\n      setSpinnerMessage(\"\");\n      setShowToast(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleSendBatchedTranscripts = async receiverUni => {\n    const token = localStorage.getItem('jwt');\n    const files = readBatchedInternalTranscripts(token, receiverUni);\n    const combinedHash = hash(files);\n    let idList = [];\n\n    try {\n      const index = await sendTranscript(combinedHash, receiverUni.blockchain_address);\n\n      for (var file in files) {\n        file.index = index;\n        idList.push(file._id);\n      }\n\n      setSpinnerMessage(\"Sending file in batch...\");\n      await postToServer(receiverUni.server_address, [file]);\n      setSpinnerMessage(\"\");\n    } catch (e) {\n      console.log(e);\n    }\n\n    setTranscriptsToNotBatched(token, receiverUni);\n  };\n\n  const postToServer = async (address, data) => {\n    const response = await fetch(address, {\n      'method': \"POST\",\n      'headers': {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      'body': JSON.stringify(data)\n    });\n    console.log('Sent transcript to the foreign university server');\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"container\", {\n    children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n      message: spinnerMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title2\",\n      children: \"exChainge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"subTitle2\",\n      children: \"Upload your transcripts and send it to the exchange university easily and safely \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dropDown2\",\n      children: [/*#__PURE__*/_jsxDEV(DropzoneAreaBase, {\n        onAdd: handleselectedFileDropzone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), uploadedFile !== null && receiverList !== null && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Uploaded file: \", selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SelectionList, {\n          options: receiverList,\n          selection: selectedUniIndex,\n          setSelection: setSelectedUniIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), selectedUniIndex !== -1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-evenly'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSendLater,\n          style: {\n            backgroundColor: \"rgb(53, 110, 255)\"\n          },\n          variant: \"contained\",\n          children: \"Send Later\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSendNow,\n          style: {\n            backgroundColor: \"rgb(53, 110, 255)\"\n          },\n          variant: \"contained\",\n          children: \"Send Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showToast,\n      autoHideDuration: 3000,\n      onClose: () => setShowToast(false),\n      message: \"Transcript sent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Upload, \"pM+axd2mNMy+yTaef7lMmhzrb0U=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/views/Upload.js"],"names":["UploadFileIcon","Grid","Button","React","Component","AppNavBar","axios","SendIcon","DropzoneAreaBase","SelectionList","setTranscriptsToNotBatched","readPartnerUni","storeInternalTranscripts","readInternalTranscripts","readBatchedInternalTranscripts","Snackbar","sendTranscript","getCurrentAccount","startService","hashTranscripts","Spinner","hash","Upload","props","selectedUniIndex","setSelectedUniIndex","useState","showToast","setShowToast","uploadedFile","setUploadedFile","selectedFile","setSelectedFile","receiverList","setReceiverList","JSON","parse","localStorage","getItem","spinnerMessage","setSpinnerMessage","handleselectedFileDropzone","event","console","log","file","reader","FileReader","onload","target","result","readAsText","handleSendLater","batched","handleSendNow","receiverUni","transcriptHash","myserver","index","blockchain_address","postToServer","e","handleSendBatchedTranscripts","token","files","combinedHash","idList","push","_id","server_address","address","data","response","fetch","stringify","name","display","alignItems","justifyContent","backgroundColor"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,gCAA3B;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,0BAAT,EAAqCC,cAArC,EAAqDC,wBAArD,EAA+EC,uBAA/E,EAAwGC,8BAAxG,QAA8I,iBAA9I;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,6BAAhD;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACnB,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CtB,KAAK,CAACuB,QAAN,CAAe,CAAC,CAAhB,CAAhD;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BzB,KAAK,CAACuB,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkC3B,KAAK,CAACuB,QAAN,CAAe,IAAf,CAAxC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkC7B,KAAK,CAACuB,QAAN,CAAe,EAAf,CAAxC;AAEA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkC/B,KAAK,CAACuB,QAAN,CAAeS,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAf,CAAxC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCrC,KAAK,CAACuB,QAAN,CAAe,EAAf,CAA5C;;AAEA,QAAMe,0BAA0B,GAAG,MAAOC,KAAP,IAAiB;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAAC,CAAD,CAAL,CAASG,IAArB;AACA,QAAIA,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASG,IAApB;AACA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAON,KAAP,IAAiB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACO,MAAN,CAAaC,MAAzB;AACApB,MAAAA,eAAe,CAACY,KAAK,CAACO,MAAN,CAAaC,MAAd,CAAf;AACH,KAHD;;AAIAJ,IAAAA,MAAM,CAACK,UAAP,CAAkBN,IAAlB;AACAb,IAAAA,eAAe,CAACU,KAAK,CAAC,CAAD,CAAL,CAASG,IAAV,CAAf;AACH,GAVD;;AAYA,QAAMO,eAAe,GAAG,YAAY;AAChC,UAAMP,IAAI,GAAGV,IAAI,CAACC,KAAL,CAAWP,YAAX,CAAb;AACAgB,IAAAA,IAAI,CAACQ,OAAL,GAAe,IAAf;AAEA,UAAMzC,wBAAwB,CAAC,CAACiC,IAAD,CAAD,CAA9B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAEAhB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GARD;;AAUA,QAAM0B,aAAa,GAAG,YAAY;AAC9B,UAAMC,WAAW,GAAGtB,YAAY,CAACT,gBAAD,CAAhC;AAEA,UAAMN,YAAY,EAAlB;AAEA,UAAMsC,cAAc,GAAGrC,eAAe,CAACU,YAAD,CAAtC,CAL8B,CAO9B;;AACA,UAAM4B,QAAQ,GAAG,yCAAjB;;AACA,QAAI;AACA,YAAMC,KAAK,GAAG,MAAM1C,cAAc,CAACwC,cAAD,EAAiBD,WAAW,CAACI,kBAA7B,CAAlC;AACA,YAAMd,IAAI,GAAGV,IAAI,CAACC,KAAL,CAAWP,YAAX,CAAb;AACAgB,MAAAA,IAAI,CAACa,KAAL,GAAaA,KAAb;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,IAApB;AAEA,YAAMjC,wBAAwB,CAAC,CAACiC,IAAD,CAAD,CAA9B;AACAL,MAAAA,iBAAiB,CAAC,iBAAD,CAAjB;AACA,YAAMoB,YAAY,CAACH,QAAD,EAAW,CAACZ,IAAD,CAAX,CAAlB;AACAL,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KAXD,CAWE,OAAOiC,CAAP,EAAU;AACRlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,CAAZ;AACH;AACJ,GAvBD;;AAyBA,QAAMC,4BAA4B,GAAG,MAAOP,WAAP,IAAuB;AACxD,UAAMQ,KAAK,GAAG1B,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;AACA,UAAM0B,KAAK,GAAGlD,8BAA8B,CAACiD,KAAD,EAAQR,WAAR,CAA5C;AAEA,UAAMU,YAAY,GAAG5C,IAAI,CAAC2C,KAAD,CAAzB;AACA,QAAIE,MAAM,GAAE,EAAZ;;AACA,QAAI;AACA,YAAMR,KAAK,GAAG,MAAM1C,cAAc,CAACiD,YAAD,EAAeV,WAAW,CAACI,kBAA3B,CAAlC;;AACA,WAAK,IAAId,IAAT,IAAiBmB,KAAjB,EAAwB;AACpBnB,QAAAA,IAAI,CAACa,KAAL,GAAaA,KAAb;AACAQ,QAAAA,MAAM,CAACC,IAAP,CAAYtB,IAAI,CAACuB,GAAjB;AACH;;AACD5B,MAAAA,iBAAiB,CAAC,0BAAD,CAAjB;AACA,YAAMoB,YAAY,CAACL,WAAW,CAACc,cAAb,EAA6B,CAACxB,IAAD,CAA7B,CAAlB;AACAL,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH,KATD,CASE,OAAOqB,CAAP,EAAU;AACRlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,CAAZ;AACH;;AAEDnD,IAAAA,0BAA0B,CAACqD,KAAD,EAAQR,WAAR,CAA1B;AACH,GApBD;;AAsBA,QAAMK,YAAY,GAAG,OAAOU,OAAP,EAAgBC,IAAhB,KAAyB;AAC1C,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAD,EAAU;AAClC,gBAAU,MADwB;AAElC,iBAAW;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFuB;AAMlC,cAAQnC,IAAI,CAACuC,SAAL,CAAeH,IAAf;AAN0B,KAAV,CAA5B;AAQA5B,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACA,WAAO4B,QAAP;AACH,GAXD;;AAaA,sBACI;AAAA,4BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEjC;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAI,MAAA,EAAE,EAAC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAMI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACI,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEE;AAAzB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKZ,YAAY,KAAK,IAAjB,IAAyBI,YAAY,KAAK,IAA1C,iBACG;AAAA,gCACI;AAAA,wCAAoBF,YAAY,CAAC4C,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAAe,UAAA,OAAO,EAAE1C,YAAxB;AAAsC,UAAA,SAAS,EAAET,gBAAjD;AAAmE,UAAA,YAAY,EAAEC;AAAjF;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,sBAJR,eASI;AAAA;AAAA;AAAA;AAAA,cATJ,EAUKD,gBAAgB,KAAK,CAAC,CAAtB,iBACG;AAAK,QAAA,KAAK,EAAE;AAAEoD,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE,QAA/B;AAAyCC,UAAAA,cAAc,EAAE;AAAzD,SAAZ;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE1B,eAAjB;AAAkC,UAAA,KAAK,EAAE;AAAE2B,YAAAA,eAAe,EAAE;AAAnB,WAAzC;AAAmF,UAAA,OAAO,EAAC,WAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEzB,aAAjB;AAAgC,UAAA,KAAK,EAAE;AAAEyB,YAAAA,eAAe,EAAE;AAAnB,WAAvC;AAAiF,UAAA,OAAO,EAAC,WAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXR;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAwBI,QAAC,QAAD;AACI,MAAA,IAAI,EAAEpD,SADV;AAEI,MAAA,gBAAgB,EAAE,IAFtB;AAGI,MAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAD,CAH/B;AAII,MAAA,OAAO,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GA7HQN,M;;KAAAA,M;AA8HT,eAAeA,MAAf","sourcesContent":["import UploadFileIcon from \"@mui/icons-material/UploadFile\";\nimport \"../App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@mui/material\";\nimport React, { Component } from \"react\";\nimport AppNavBar from \"../component/AppNavBar\";\n\nimport axios from 'axios';\nimport SendIcon from '@mui/icons-material/Send';\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\nimport SelectionList from \"../component/SelectionList\";\nimport { setTranscriptsToNotBatched, readPartnerUni, storeInternalTranscripts, readInternalTranscripts, readBatchedInternalTranscripts } from \"../services/api\";\nimport Snackbar from '@mui/material/Snackbar';\nimport { sendTranscript } from \"../services/blockchain/contractCalls\";\nimport { getCurrentAccount, startService } from \"../services/blockchain/util\";\nimport { hashTranscripts } from \"../utils/accountUtils\";\nimport Spinner from \"../component/Spinner\";\nimport hash from \"object-hash\";\n\nfunction Upload(props) {\n    const [selectedUniIndex, setSelectedUniIndex] = React.useState(-1);\n\n    const [showToast, setShowToast] = React.useState(false);\n    const [uploadedFile, setUploadedFile] = React.useState(null);\n    const [selectedFile, setSelectedFile] = React.useState({});\n\n    const [receiverList, setReceiverList] = React.useState(JSON.parse(localStorage.getItem('partnerUnis')));\n    const [spinnerMessage, setSpinnerMessage] = React.useState(\"\");\n\n    const handleselectedFileDropzone = async (event) => {\n        console.log(event[0].file);\n        var file = event[0].file;\n        var reader = new FileReader();\n        reader.onload = async (event) => {\n            console.log(event.target.result);\n            setUploadedFile(event.target.result);\n        };\n        reader.readAsText(file);\n        setSelectedFile(event[0].file);\n    };\n\n    const handleSendLater = async () => {\n        const file = JSON.parse(uploadedFile);\n        file.batched = true;\n\n        await storeInternalTranscripts([file]);\n        console.log(\"Stored transcript locally\");\n\n        setShowToast(true);\n    };\n\n    const handleSendNow = async () => {\n        const receiverUni = receiverList[selectedUniIndex];\n\n        await startService();\n\n        const transcriptHash = hashTranscripts(uploadedFile);\n\n        // const server = receiverUni.serverAddress;\n        const myserver = \"http://localhost:4003/transcript/create\";\n        try {\n            const index = await sendTranscript(transcriptHash, receiverUni.blockchain_address);\n            const file = JSON.parse(uploadedFile);\n            file.index = index;\n            console.log('file', file);\n\n            await storeInternalTranscripts([file]);\n            setSpinnerMessage(\"Sending file...\");\n            await postToServer(myserver, [file]);\n            setSpinnerMessage(\"\");\n            setShowToast(true);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n    \n    const handleSendBatchedTranscripts = async (receiverUni) => {\n        const token = localStorage.getItem('jwt');\n        const files = readBatchedInternalTranscripts(token, receiverUni)\n        \n        const combinedHash = hash(files);\n        let idList =[]\n        try {\n            const index = await sendTranscript(combinedHash, receiverUni.blockchain_address);\n            for (var file in files) {\n                file.index = index;\n                idList.push(file._id)\n            }\n            setSpinnerMessage(\"Sending file in batch...\");\n            await postToServer(receiverUni.server_address, [file]);\n            setSpinnerMessage(\"\");\n        } catch (e) {\n            console.log(e);\n        }\n\n        setTranscriptsToNotBatched(token, receiverUni)\n    };\n\n    const postToServer = async (address, data) => {\n        const response = await fetch(address, {\n            'method': \"POST\",\n            'headers': {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            'body': JSON.stringify(data),\n        });\n        console.log('Sent transcript to the foreign university server');\n        return response;\n    };\n\n    return (\n        <container>\n            <AppNavBar />\n            <Spinner message={spinnerMessage} />\n            <h1 id=\"title2\">exChainge</h1>\n            <div id=\"subTitle2\">Upload your transcripts and send it to the exchange university easily and safely </div>\n\n            <div id=\"dropDown2\">\n                <DropzoneAreaBase onAdd={handleselectedFileDropzone} />\n                <p></p>\n                {uploadedFile !== null && receiverList !== null && (\n                    <>\n                        <h3>Uploaded file: {selectedFile.name}</h3>\n                        <SelectionList options={receiverList} selection={selectedUniIndex} setSelection={setSelectedUniIndex} />\n                    </>\n                )}\n                <p></p>\n                {selectedUniIndex !== -1 &&\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly' }}>\n                        <Button onClick={handleSendLater} style={{ backgroundColor: \"rgb(53, 110, 255)\" }} variant=\"contained\">Send Later</Button>\n                        <Button onClick={handleSendNow} style={{ backgroundColor: \"rgb(53, 110, 255)\" }} variant=\"contained\">Send Now</Button>\n                    </div>\n                }\n            </div>\n\n            <Snackbar\n                open={showToast}\n                autoHideDuration={3000}\n                onClose={() => setShowToast(false)}\n                message=\"Transcript sent\"\n            />\n        </container>\n    );\n}\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}