{"ast":null,"code":"import Web3 from \"web3\";\nimport { sendTransaction, callMethod } from \"./util\";\nvar web3 = new Web3(window.ethereum);\n\nconst accountStoreAbi = require(\"../../contracts-abi/AccountStore.json\");\n\nconst accountStore = new web3.eth.Contract(JSON.parse(JSON.stringify(accountStoreAbi)), process.env.REACT_APP_ACCOUNT_STORE_ADDRESS.toLowerCase());\n\nconst hashStoreAbi = require(\"../../contracts-abi/HashStore.json\");\n\nconst hashStore = new web3.eth.Contract(JSON.parse(JSON.stringify(hashStoreAbi)), process.env.REACT_APP_HASH_STORE_ADDRESS.toLowerCase()); // main methods\n\nexport const registerAccount = async (name, serverAddress) => {\n  console.log(`Registering account ${serverAddress} of ${name} on the blockchain...`);\n  const info = {\n    name: name,\n    serverAddress: serverAddress\n  };\n  const encoded = accountStore.methods.register(info).encodeABI();\n  const rec = await sendTransaction(accountStore._address, encoded);\n\n  if (!rec.status) {\n    throw new Error(\"Failed to register account on the blockchain (Exists already)\");\n  }\n\n  console.log(`Account ${serverAddress} of ${name} is registered on the blockchain`);\n};\nexport const sendTranscript = async (hash, receiverAddress) => {\n  console.log(`Storing transcript hash on the blockchain...`);\n  const encoded = hashStore.methods.store(hash, receiverAddress).encodeABI();\n  const rec = await sendTransaction(hashStore._address, encoded);\n\n  if (!rec.status) {\n    throw new Error(\"Failed to send transcript\");\n  }\n\n  const log = rec.logs[0];\n  const res = web3.eth.abi.decodeParameters(['string', 'uint256'], log.data);\n  const index = res[1];\n  console.log(`Hash stored. Accessible by ${receiverAddress} using index ${index}`);\n  return index;\n};\nexport const verifyTranscript = async (hash, index) => {\n  console.log(`Verifying transcript ${hash}`);\n  const encoded = hashStore.methods.validate(hash, index).encodeABI();\n  const res = await callMethod(hashStore._address, encoded);\n  return web3.eth.abi.decodeParameter('bool', res);\n}; // other methods\n\nexport const getReceivedTransactionsCount = async () => {\n  const encoded = hashStore.methods.getHashesLength().encodeABI();\n  const res = await callMethod(hashStore._address, encoded);\n  return web3.eth.abi.decodeParameter('uint256', res);\n};\nexport const getAllAccounts = async () => {\n  const encoded = accountStore.methods.getAllAccounts().encodeABI();\n  console.log(\"test 21\", encoded);\n  const res = await callMethod(accountStore._address, encoded);\n  console.log(\"test\", res);\n  return web3.eth.abi.decodeParameter('address[]', res);\n};\nexport const getAccountInfo = async address => {\n  const encoded = accountStore.methods.accountInfo(address).encodeABI();\n  const res = await callMethod(accountStore._address, encoded);\n  const r = web3.eth.abi.decodeParameters(['string', 'string'], res);\n  return {\n    name: r[0],\n    serverAddress: r[1]\n  };\n};\nexport const checkAccountExists = async address => {\n  const encoded = accountStore.methods.accountExists(address).encodeABI();\n  const res = await callMethod(accountStore._address, encoded);\n  return web3.eth.abi.decodeParameter('bool', res);\n};","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/services/blockchain/contractCalls.js"],"names":["Web3","sendTransaction","callMethod","web3","window","ethereum","accountStoreAbi","require","accountStore","eth","Contract","JSON","parse","stringify","process","env","REACT_APP_ACCOUNT_STORE_ADDRESS","toLowerCase","hashStoreAbi","hashStore","REACT_APP_HASH_STORE_ADDRESS","registerAccount","name","serverAddress","console","log","info","encoded","methods","register","encodeABI","rec","_address","status","Error","sendTranscript","hash","receiverAddress","store","logs","res","abi","decodeParameters","data","index","verifyTranscript","validate","decodeParameter","getReceivedTransactionsCount","getHashesLength","getAllAccounts","getAccountInfo","address","accountInfo","r","checkAccountExists","accountExists"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { sendTransaction, callMethod } from \"./util\";\n\nvar web3 = new Web3(window.ethereum);\n\nconst accountStoreAbi = require(\"../../contracts-abi/AccountStore.json\");\nconst accountStore = new web3.eth.Contract(\n    JSON.parse(JSON.stringify(accountStoreAbi)),\n    process.env.REACT_APP_ACCOUNT_STORE_ADDRESS.toLowerCase()\n);\n\nconst hashStoreAbi = require(\"../../contracts-abi/HashStore.json\");\nconst hashStore = new web3.eth.Contract(\n    JSON.parse(JSON.stringify(hashStoreAbi)),\n    process.env.REACT_APP_HASH_STORE_ADDRESS.toLowerCase()\n);\n\n// main methods\n\nexport const registerAccount = async (name, serverAddress) => {\n    console.log(`Registering account ${serverAddress} of ${name} on the blockchain...`);\n\n    const info = { name: name, serverAddress: serverAddress };\n    const encoded = accountStore.methods.register(info).encodeABI();\n    const rec = await sendTransaction(accountStore._address, encoded);\n\n    if (!rec.status) {\n        throw new Error(\"Failed to register account on the blockchain (Exists already)\");\n    }\n    console.log(`Account ${serverAddress} of ${name} is registered on the blockchain`);\n};\n\nexport const sendTranscript = async (hash, receiverAddress) => {\n    console.log(`Storing transcript hash on the blockchain...`);\n\n    const encoded = hashStore.methods.store(hash, receiverAddress).encodeABI();\n    const rec = await sendTransaction(hashStore._address, encoded);\n\n    if (!rec.status) {\n        throw new Error(\"Failed to send transcript\");\n    }\n\n    const log = rec.logs[0];\n    const res = web3.eth.abi.decodeParameters(['string', 'uint256'], log.data);\n    const index = res[1];\n    console.log(`Hash stored. Accessible by ${receiverAddress} using index ${index}`);\n    return index;\n};\n\nexport const verifyTranscript = async (hash, index) => {\n    console.log(`Verifying transcript ${hash}`);\n    const encoded = hashStore.methods.validate(hash, index).encodeABI();\n    const res = await callMethod(hashStore._address, encoded);\n    return web3.eth.abi.decodeParameter('bool', res);\n};\n\n\n// other methods\n\nexport const getReceivedTransactionsCount = async () => {\n    const encoded = hashStore.methods.getHashesLength().encodeABI();\n    const res = await callMethod(hashStore._address, encoded);\n    return web3.eth.abi.decodeParameter('uint256', res);\n};\n\nexport const getAllAccounts = async () => {\n    const encoded = accountStore.methods.getAllAccounts().encodeABI();\n    console.log(\"test 21\",encoded)\n\n    const res = await callMethod(accountStore._address, encoded);\n    console.log(\"test\",res)\n    return web3.eth.abi.decodeParameter('address[]', res);\n}\n\nexport const getAccountInfo = async (address) => {\n    const encoded = accountStore.methods.accountInfo(address).encodeABI();\n    const res = await callMethod(accountStore._address, encoded);\n    const r = web3.eth.abi.decodeParameters(['string', 'string'], res);\n    return {name: r[0], serverAddress: r[1]};\n}\n\nexport const checkAccountExists = async (address) => {\n    const encoded = accountStore.methods.accountExists(address).encodeABI();\n    const res = await callMethod(accountStore._address, encoded);\n    return web3.eth.abi.decodeParameter('bool', res);\n};\n"]},"metadata":{},"sourceType":"module"}