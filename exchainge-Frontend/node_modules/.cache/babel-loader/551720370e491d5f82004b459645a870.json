{"ast":null,"code":"const getUser = () => {\n  if (window.localStorage[\"jwtToken-mobility\"]) {\n    const token = window.localStorage[\"jwtToken-mobility\"];\n    const base64Url = token.split(\".\")[1];\n    const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n    const userJson = JSON.parse(window.atob(base64)); // if token is expired delete it and return {}\n    // --> User is not logged in anymore.\n\n    if (userJson.exp > Date.now()) {\n      window.localStorage.removeItem(\"jwtToken-mobility\");\n      return {};\n    }\n\n    return {\n      user: {\n        username: userJson.username,\n        token\n      }\n    };\n  }\n\n  return {};\n}; // For results carrying over\n// dispatch(\"SET_RESULTS\", {results: {areas, languages, results, ....}})\n\n\nexport default function user() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUser();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"EDIT_SUCCESS\":\n      return {\n        user: action.user\n      };\n\n    case \"EDIT_FAILURE\":\n      return {\n        error: \"Could not edit your profile\"\n      };\n\n    case \"SET_USER\":\n      return {\n        user: action.user\n      };\n\n    case \"LOGIN_SUCCESS\":\n      return {\n        user: action.user\n      };\n\n    case \"LOGIN_FAILURE\":\n      return {\n        error: \"E-Mail or Password incorrect\"\n      };\n\n    case \"LOGIN_USER_NOT_FOUND\":\n      return {\n        error: \"User not found\"\n      };\n\n    case \"LOGIN_RESET\":\n      return {};\n\n    case \"SET_RESULTS\":\n      return {\n        results: action.results\n      };\n\n    case \"LOGOUT\":\n      return {};\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/redux/reducers/userReducer.js"],"names":["getUser","window","localStorage","token","base64Url","split","base64","replace","userJson","JSON","parse","atob","exp","Date","now","removeItem","user","username","state","action","type","error","results"],"mappings":"AAAA,MAAMA,OAAO,GAAG,MAAM;AAClB,MAAIC,MAAM,CAACC,YAAP,CAAoB,mBAApB,CAAJ,EAA8C;AAC1C,UAAMC,KAAK,GAAGF,MAAM,CAACC,YAAP,CAAoB,mBAApB,CAAd;AACA,UAAME,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAlB;AACA,UAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,EAA4BA,OAA5B,CAAoC,GAApC,EAAyC,GAAzC,CAAf;AACA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,MAAM,CAACU,IAAP,CAAYL,MAAZ,CAAX,CAAjB,CAJ0C,CAK1C;AACA;;AACA,QAAIE,QAAQ,CAACI,GAAT,GAAeC,IAAI,CAACC,GAAL,EAAnB,EAA+B;AAC3Bb,MAAAA,MAAM,CAACC,YAAP,CAAoBa,UAApB,CAA+B,mBAA/B;AACA,aAAO,EAAP;AACH;;AACD,WAAO;AACHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAET,QAAQ,CAACS,QADjB;AAEFd,QAAAA;AAFE;AADH,KAAP;AAMH;;AACD,SAAO,EAAP;AACH,CApBD,C,CAsBA;AACA;;;AAEA,eAAe,SAASa,IAAT,GAAyC;AAAA,MAA3BE,KAA2B,uEAAnBlB,OAAO,EAAY;AAAA,MAARmB,MAAQ;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,aAAO;AAAEJ,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAf,OAAP;;AACJ,SAAK,cAAL;AACI,aAAO;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO;AAAEL,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAf,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO;AAAEA,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAf,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACJ,SAAK,sBAAL;AACI,aAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACJ,SAAK,aAAL;AACI,aAAO,EAAP;;AACJ,SAAK,aAAL;AACI,aAAO;AAACC,QAAAA,OAAO,EAAEH,MAAM,CAACG;AAAjB,OAAP;;AACJ,SAAK,QAAL;AACI,aAAO,EAAP;;AACJ;AACI,aAAOJ,KAAP;AApBR;AAsBH","sourcesContent":["const getUser = () => {\n    if (window.localStorage[\"jwtToken-mobility\"]) {\n        const token = window.localStorage[\"jwtToken-mobility\"];\n        const base64Url = token.split(\".\")[1];\n        const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n        const userJson = JSON.parse(window.atob(base64));\n        // if token is expired delete it and return {}\n        // --> User is not logged in anymore.\n        if (userJson.exp > Date.now()) {\n            window.localStorage.removeItem(\"jwtToken-mobility\");\n            return {};\n        }\n        return {\n            user: {\n                username: userJson.username,\n                token\n            },\n        };\n    }\n    return {};\n};\n\n// For results carrying over\n// dispatch(\"SET_RESULTS\", {results: {areas, languages, results, ....}})\n\nexport default function user(state = getUser(), action) {\n    switch (action.type) {\n        case \"EDIT_SUCCESS\":\n            return { user: action.user };\n        case \"EDIT_FAILURE\":\n            return { error: \"Could not edit your profile\" };\n        case \"SET_USER\":\n            return { user: action.user }\n        case \"LOGIN_SUCCESS\":\n            return { user: action.user };\n        case \"LOGIN_FAILURE\":\n            return { error: \"E-Mail or Password incorrect\" };\n        case \"LOGIN_USER_NOT_FOUND\":\n            return { error: \"User not found\" };\n        case \"LOGIN_RESET\":\n            return {};\n        case \"SET_RESULTS\":\n            return {results: action.results}\n        case \"LOGOUT\":\n            return {};\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}