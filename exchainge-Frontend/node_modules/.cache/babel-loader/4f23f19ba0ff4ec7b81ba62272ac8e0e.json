{"ast":null,"code":"let user_list = [{\n  username: \"seba-user\",\n  password: \"random-password\"\n}];\nexport function login(username, password) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"LOGIN_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"LOGIN_FAILURE\",\n      error\n    };\n  }\n\n  function onUserNotFound(error) {\n    return {\n      type: \"LOGIN_USER_NOT_FOUND\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const resp = user_list.some(user => user.username === username && user.password === password);\n      if (resp) dispatch(onSuccess({\n        username: username,\n        password: password\n      }));else dispatch(onUserNotFound(\"User not present\"));\n    } catch (e) {\n      if (e == 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserNotFound(e));\n      }\n    }\n  };\n} // export function register(username, password, firstName, lastName, birthDate, healthInsurance, address, gender, pictureUrl) {\n//     function onSuccess(user) {\n//         return {type: \"LOGIN_SUCCESS\", user: user};\n//     }\n//\n//     function onFailure(error) {\n//         return {type: \"LOGIN_FAILURE\", error: error};\n//     }\n//\n//     return async (dispatch) => {\n//         try {\n//             // const user = await UserService.register(username, password, firstName, lastName, birthDate, healthInsurance, address, gender, pictureUrl);\n//             dispatch(onSuccess(user));\n//         } catch (e) {\n//             dispatch(onFailure(e));\n//         }\n//     };\n// }","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js"],"names":["user_list","username","password","login","onSuccess","user","console","log","type","onFailure","error","onUserNotFound","dispatch","resp","some","e"],"mappings":"AACA,IAAIA,SAAS,GAAG,CAAC;AACbC,EAAAA,QAAQ,EAAE,WADG;AAEbC,EAAAA,QAAQ,EAAE;AAFG,CAAD,CAAhB;AAKA,OAAO,SAASC,KAAT,CAAeF,QAAf,EAAyBC,QAAzB,EAAmC;AACtC,WAASE,SAAT,CAAmBC,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUF,IAAtB;AACA,WAAO;AAACG,MAAAA,IAAI,EAAE,eAAP;AAAwBH,MAAAA;AAAxB,KAAP;AACH;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAACF,MAAAA,IAAI,EAAE,eAAP;AAAwBE,MAAAA;AAAxB,KAAP;AACH;;AAED,WAASC,cAAT,CAAwBD,KAAxB,EAA+B;AAC3B,WAAO;AAACF,MAAAA,IAAI,EAAE,sBAAP;AAA+BE,MAAAA;AAA/B,KAAP;AACH;;AAED,SAAO,MAAOE,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,IAAI,GAAGb,SAAS,CAACc,IAAV,CAAeT,IAAI,IAAIA,IAAI,CAACJ,QAAL,KAAkBA,QAAlB,IAA8BI,IAAI,CAACH,QAAL,KAAkBA,QAAvE,CAAb;AACA,UAAGW,IAAH,EAASD,QAAQ,CAACR,SAAS,CAAC;AAACH,QAAAA,QAAQ,EAAEA,QAAX;AAAqBC,QAAAA,QAAQ,EAAEA;AAA/B,OAAD,CAAV,CAAR,CAAT,KACKU,QAAQ,CAACD,cAAc,CAAC,kBAAD,CAAf,CAAR;AACR,KAJD,CAIE,OAAOI,CAAP,EAAU;AACR,UAAIA,CAAC,IAAI,GAAT,EAAc;AACVH,QAAAA,QAAQ,CAACH,SAAS,CAACM,CAAD,CAAV,CAAR;AACH,OAFD,MAEO;AACHH,QAAAA,QAAQ,CAACD,cAAc,CAACI,CAAD,CAAf,CAAR;AACH;AACJ;AACJ,GAZD;AAaH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nlet user_list = [{\n    username: \"seba-user\",\n    password: \"random-password\"\n}]\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        console.log(\"Success\"+user);\n        return {type: \"LOGIN_SUCCESS\", user};\n    }\n\n    function onFailure(error) {\n        return {type: \"LOGIN_FAILURE\", error};\n    }\n\n    function onUserNotFound(error) {\n        return {type: \"LOGIN_USER_NOT_FOUND\", error};\n    }\n\n    return async (dispatch) => {\n        try {\n            const resp = user_list.some(user => user.username === username && user.password === password);\n            if(resp) dispatch(onSuccess({username: username, password: password}));\n            else dispatch(onUserNotFound(\"User not present\"));\n        } catch (e) {\n            if (e == 401) {\n                dispatch(onFailure(e))\n            } else {\n                dispatch(onUserNotFound(e))\n            }\n        }\n    };\n}\n\n// export function register(username, password, firstName, lastName, birthDate, healthInsurance, address, gender, pictureUrl) {\n//     function onSuccess(user) {\n//         return {type: \"LOGIN_SUCCESS\", user: user};\n//     }\n//\n//     function onFailure(error) {\n//         return {type: \"LOGIN_FAILURE\", error: error};\n//     }\n//\n//     return async (dispatch) => {\n//         try {\n//             // const user = await UserService.register(username, password, firstName, lastName, birthDate, healthInsurance, address, gender, pictureUrl);\n//             dispatch(onSuccess(user));\n//         } catch (e) {\n//             dispatch(onFailure(e));\n//         }\n//     };\n// }"]},"metadata":{},"sourceType":"module"}