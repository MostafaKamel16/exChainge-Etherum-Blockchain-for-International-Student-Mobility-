{"ast":null,"code":"var _jsxFileName = \"/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppNavBar from '../component/AppNavBar';\nimport Web3 from 'web3';\nimport Grid from \"@material-ui/core/Grid\";\nimport { Paper, Button, TextField, Typography } from \"@material-ui/core\";\nimport { readInternalTranscriptsbyId } from \"../api\";\nimport Timeline from \"../component/Timeline\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst helloWorldAddress = '0x18D9752E1b4F2AB987F3D93CF3084c83A195D4b7';\nconst accountStoreAddress = '0x055e01B90Ac0197144c55B75382A8bf293971176';\nconst hashStoreAddress = '0xe0120F023289CA6EaBAD6541BA00f8fb12B77418';\nconst host = 'http://192.168.0.105:8545';\n\nconst helloWorldAbi = require(\"../contracts-abi/helloWorld.json\");\n\nconst accountStoreAbi = require(\"../abi/AccountStore.json\");\n\nconst hashStoreAbi = require(\"../abi/HashStore.json\");\n/**\n * For transcript verification .\n * @param {props} props\n */\n\n\nfunction Verify(props) {\n  _s();\n\n  const [fakeTranscript, setTranscript] = React.useState(\"\");\n  const [openDialog, setOpenTimeline] = React.useState(false);\n\n  const onChange = e => {\n    setTranscript(e.target.value);\n    setStatus(\"Not started\");\n  };\n\n  const [Status, setStatus] = React.useState(\"Not started\");\n\n  const onChangeStatus = val => {\n    setStatus(val);\n  };\n\n  const transcriptStored = {\n    studentName: \"test_student\",\n    subject: {\n      name: \"test_subject\",\n      grade: 2\n    }\n  };\n\n  const getContractInstance = async (host, deployedContractAbi, deployedContractAddress, walletAddress) => {\n    const web3 = new Web3(host);\n\n    try {\n      const password = \"123456\";\n      await web3.eth.personal.unlockAccount(walletAddress, password, 0);\n    } catch (e) {\n      console.log(e);\n    }\n\n    const contractInstance = new web3.eth.Contract(deployedContractAbi, deployedContractAddress.toLowerCase());\n    return contractInstance;\n  };\n\n  const setupContractCall = async () => {\n    let web3 = undefined;\n\n    if (!window.ethereum) {\n      window.alert(\"Please install MetaMask first.\");\n      return;\n    }\n\n    if (!web3) {\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // We don't know window.web3 version, so we use our own instance of Web3\n        // with the injected provider given by MetaMask\n\n        web3 = new Web3(window.ethereum);\n      } catch (error) {\n        window.alert(\"You need to allow MetaMask.\");\n        return;\n      }\n    }\n\n    const coinbase = await web3.eth.getCoinbase();\n\n    if (!coinbase) {\n      window.alert(\"Please activate MetaMask first.\");\n      return;\n    }\n\n    const id = \"0x632989cf2526aefa95c4d6c3cab5710f711ed827\";\n    const publicAddress = id.toLowerCase();\n    const balance = await web3.eth.getBalance(publicAddress);\n    console.log(\"Fetched address : \", publicAddress, \", Balance : \", balance);\n    return publicAddress;\n  };\n\n  const verifyTranscript = async () => {\n    const Dummytranscript = {\n      studentName: \"test_student\",\n      subject: {\n        name: \"test_subject\",\n        grade: 2\n      }\n    };\n    onChangeStatus(\"Processing of transcript underway\");\n    console.log(\"The click pre call flag\");\n    let walletAddress = await setupContractCall();\n    console.log(\"call a contract :\");\n    const contractInstance = await getContractInstance(host, JSON.parse(JSON.stringify(hashStoreAbi)), hashStoreAddress, walletAddress);\n    console.log(contractInstance);\n    console.log(fakeTranscript, Dummytranscript);\n    /*var Event = contractInstance.validity({_from: walletAddress});\n    Event.watch(function(err, result) {\n        if (err) {\n          console.log(err)\n          return;\n        }\n        console.log(result.args.isValid)\n        // check that result.args._from is web3.eth.coinbase then\n        // display result.args._value in the UI and call    \n        Event.stopWatching()\n      })*/\n\n    const res = await contractInstance.methods.validate(JSON.parse(fakeTranscript), 0).send({\n      from: walletAddress\n    });\n    console.log(\"Obtained value at deployed contract is: \");\n    if (res.events['validity']['returnValues']['isValid']) onChangeStatus(\"Processing of transcript Successful!!!\");else onChangeStatus(\"Processing of transcript Failed :(\");\n    console.log(res.events['validity']['returnValues']['isValid']);\n    console.log(\"After click call flag\");\n  };\n\n  const FetchData = async () => {\n    let web3 = undefined;\n\n    if (!window.ethereum) {\n      window.alert('Please install MetaMask first.');\n      return;\n    }\n\n    if (!web3) {\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // We don't know window.web3 version, so we use our own instance of Web3\n        // with the injected provider given by MetaMask\n\n        web3 = new Web3(window.ethereum);\n      } catch (error) {\n        window.alert('You need to allow MetaMask.');\n        return;\n      }\n    }\n\n    const coinbase = await web3.eth.getCoinbase();\n\n    if (!coinbase) {\n      window.alert('Please activate MetaMask first.');\n      return;\n    }\n\n    const publicAddress = coinbase.toLowerCase();\n    console.log(publicAddress);\n    let contract = new web3.eth.Contract(hashStoreAbi, \"0x2e1AfeAEE35302aBC85D4866f72675b62A916B59\");\n    console.log(await contract.methods.getGreeting().call()); //await contract.methods.setGreeting(\"TEST CHANGE!\").call()\n    //console.log(await contract.methods.getGreeting().call())\n  };\n\n  const checkStatus = async () => {\n    const transcript = await readInternalTranscriptsbyId(localStorage.getItem('jwt'), '61ed43288536553efc2a3544');\n\n    if (transcript) {\n      const steps = ['VALID', 'INVALID'];\n\n      if (steps.includes(transcript.status_processing)) {\n        await setOpenTimeline(true);\n        onChangeStatus(transcript.status_processing + openDialog);\n      } else onChangeStatus(\"Failed to fetch a transcript\");\n    } else onChangeStatus(\"Failed to fetch a transcript\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"container\", {\n    children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        onClick: checkStatus,\n        children: \"Check Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Timeline, {\n        step: 3,\n        items: ['a', 'b', 'c']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), () => {\n        if (!openDialog) console.log(openDialog);\n        return /*#__PURE__*/_jsxDEV(Timeline, {\n          step: 3,\n          items: ['a', 'b', 'c']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 33\n        }, this);\n      }]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      id: \"iconsPosition\",\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Transcript\",\n          fullWidth: true,\n          value: fakeTranscript,\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          component: \"span\",\n          onClick: verifyTranscript,\n          children: \"Verify Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Stored Tramscript : \", JSON.stringify(transcriptStored)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Transcript Verification Status : \", Status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Verify, \"7M192Cyw+l604xngEQajXaVd8/c=\");\n\n_c = Verify;\nexport default connect()(withRouter(Verify));\n\nvar _c;\n\n$RefreshReg$(_c, \"Verify\");","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js"],"names":["React","withRouter","connect","AppNavBar","Web3","Grid","Paper","Button","TextField","Typography","readInternalTranscriptsbyId","Timeline","helloWorldAddress","accountStoreAddress","hashStoreAddress","host","helloWorldAbi","require","accountStoreAbi","hashStoreAbi","Verify","props","fakeTranscript","setTranscript","useState","openDialog","setOpenTimeline","onChange","e","target","value","setStatus","Status","onChangeStatus","val","transcriptStored","studentName","subject","name","grade","getContractInstance","deployedContractAbi","deployedContractAddress","walletAddress","web3","password","eth","personal","unlockAccount","console","log","contractInstance","Contract","toLowerCase","setupContractCall","undefined","window","ethereum","alert","enable","error","coinbase","getCoinbase","id","publicAddress","balance","getBalance","verifyTranscript","Dummytranscript","JSON","parse","stringify","res","methods","validate","send","from","events","FetchData","contract","getGreeting","call","checkStatus","transcript","localStorage","getItem","steps","includes","status_processing"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,mBAArD;AACA,SAASC,2BAAT,QAA4C,QAA5C;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,iBAAiB,GAAG,4CAA1B;AACA,MAAMC,mBAAmB,GAAG,4CAA5B;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;AACA,MAAMC,IAAI,GAAG,2BAAb;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,kCAAD,CAA7B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,0BAAD,CAA/B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,uBAAD,CAA5B;AACA;AACA;AACA;AACA;;;AAEA,SAASG,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,aAAjB,IAAkCvB,KAAK,CAACwB,QAAN,CAAe,EAAf,CAAxC;AACA,QAAM,CAACC,UAAD,EAAaC,eAAb,IAAgC1B,KAAK,CAACwB,QAAN,CAAe,KAAf,CAAtC;;AACA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACpBL,IAAAA,aAAa,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACAC,IAAAA,SAAS,CAAC,aAAD,CAAT;AACH,GAHD;;AAIA,QAAM,CAACC,MAAD,EAASD,SAAT,IAAsB/B,KAAK,CAACwB,QAAN,CAAe,aAAf,CAA5B;;AACA,QAAMS,cAAc,GAAIC,GAAD,IAAS;AAC5BH,IAAAA,SAAS,CAACG,GAAD,CAAT;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAG;AACrBC,IAAAA,WAAW,EAAE,cADQ;AAErBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE,cADD;AAELC,MAAAA,KAAK,EAAE;AAFF;AAFY,GAAzB;;AAQA,QAAMC,mBAAmB,GAAG,OACxBzB,IADwB,EAExB0B,mBAFwB,EAGxBC,uBAHwB,EAIxBC,aAJwB,KAKvB;AACD,UAAMC,IAAI,GAAG,IAAIxC,IAAJ,CAASW,IAAT,CAAb;;AACA,QAAI;AACA,YAAM8B,QAAQ,GAAG,QAAjB;AACA,YAAMD,IAAI,CAACE,GAAL,CAASC,QAAT,CAAkBC,aAAlB,CAAgCL,aAAhC,EAA+CE,QAA/C,EAAyD,CAAzD,CAAN;AACH,KAHD,CAGE,OAAOjB,CAAP,EAAU;AACRqB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,CAAZ;AACH;;AAED,UAAMuB,gBAAgB,GAAG,IAAIP,IAAI,CAACE,GAAL,CAASM,QAAb,CACrBX,mBADqB,EAErBC,uBAAuB,CAACW,WAAxB,EAFqB,CAAzB;AAIA,WAAOF,gBAAP;AACH,GAnBD;;AAqBA,QAAMG,iBAAiB,GAAG,YAAY;AAClC,QAAIV,IAAI,GAAGW,SAAX;;AAEA,QAAI,CAACC,MAAM,CAACC,QAAZ,EAAsB;AAClBD,MAAAA,MAAM,CAACE,KAAP,CAAa,gCAAb;AACA;AACH;;AACD,QAAI,CAACd,IAAL,EAAW;AACP,UAAI;AACA;AACA,cAAMY,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN,CAFA,CAIA;AACA;;AACAf,QAAAA,IAAI,GAAG,IAAIxC,IAAJ,CAASoD,MAAM,CAACC,QAAhB,CAAP;AACH,OAPD,CAOE,OAAOG,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACE,KAAP,CAAa,6BAAb;AACA;AACH;AACJ;;AACD,UAAMG,QAAQ,GAAG,MAAMjB,IAAI,CAACE,GAAL,CAASgB,WAAT,EAAvB;;AACA,QAAI,CAACD,QAAL,EAAe;AACXL,MAAAA,MAAM,CAACE,KAAP,CAAa,iCAAb;AACA;AACH;;AACD,UAAMK,EAAE,GAAG,4CAAX;AACA,UAAMC,aAAa,GAAGD,EAAE,CAACV,WAAH,EAAtB;AACA,UAAMY,OAAO,GAAG,MAAMrB,IAAI,CAACE,GAAL,CAASoB,UAAT,CAAoBF,aAApB,CAAtB;AACAf,IAAAA,OAAO,CAACC,GAAR,CACI,oBADJ,EAEIc,aAFJ,EAGI,cAHJ,EAIIC,OAJJ;AAMA,WAAOD,aAAP;AACH,GAnCD;;AAuCA,QAAMG,gBAAgB,GAAG,YAAY;AACjC,UAAMC,eAAe,GAAG;AACpBhC,MAAAA,WAAW,EAAE,cADO;AAEpBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,cADD;AAELC,QAAAA,KAAK,EAAE;AAFF;AAFW,KAAxB;AAQAN,IAAAA,cAAc,CAAC,mCAAD,CAAd;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,QAAIP,aAAa,GAAG,MAAMW,iBAAiB,EAA3C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMC,gBAAgB,GAAG,MAAMX,mBAAmB,CAC9CzB,IAD8C,EAE9CsD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAepD,YAAf,CAAX,CAF8C,EAG9CL,gBAH8C,EAI9C6B,aAJ8C,CAAlD;AAMAM,IAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY5B,cAAZ,EAA4B8C,eAA5B;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,UAAMI,GAAG,GAAG,MAAMrB,gBAAgB,CAACsB,OAAjB,CAAyBC,QAAzB,CAAkCL,IAAI,CAACC,KAAL,CAAWhD,cAAX,CAAlC,EAA8D,CAA9D,EAAiEqD,IAAjE,CAAsE;AAAEC,MAAAA,IAAI,EAAEjC;AAAR,KAAtE,CAAlB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACA,QAAIsB,GAAG,CAACK,MAAJ,CAAW,UAAX,EAAuB,cAAvB,EAAuC,SAAvC,CAAJ,EACI5C,cAAc,CAAC,wCAAD,CAAd,CADJ,KAGIA,cAAc,CAAC,oCAAD,CAAd;AACJgB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAG,CAACK,MAAJ,CAAW,UAAX,EAAuB,cAAvB,EAAuC,SAAvC,CAAZ;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,GAxCD;;AA0CA,QAAM4B,SAAS,GAAG,YAAY;AAC1B,QAAIlC,IAAI,GAAGW,SAAX;;AACA,QAAI,CAAEC,MAAD,CAASC,QAAd,EAAwB;AACpBD,MAAAA,MAAM,CAACE,KAAP,CAAa,gCAAb;AACA;AACH;;AAGD,QAAI,CAACd,IAAL,EAAW;AACP,UAAI;AACA;AACA,cAAOY,MAAD,CAASC,QAAT,CAAkBE,MAAlB,EAAN,CAFA,CAIA;AACA;;AACAf,QAAAA,IAAI,GAAG,IAAIxC,IAAJ,CAAUoD,MAAD,CAASC,QAAlB,CAAP;AACH,OAPD,CAOE,OAAOG,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACE,KAAP,CAAa,6BAAb;AACA;AACH;AACJ;;AAED,UAAMG,QAAQ,GAAG,MAAMjB,IAAI,CAACE,GAAL,CAASgB,WAAT,EAAvB;;AACA,QAAI,CAACD,QAAL,EAAe;AACXL,MAAAA,MAAM,CAACE,KAAP,CAAa,iCAAb;AACA;AACH;;AAED,UAAMM,aAAa,GAAGH,QAAQ,CAACR,WAAT,EAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYc,aAAZ;AACA,QAAIe,QAAQ,GAAG,IAAInC,IAAI,CAACE,GAAL,CAASM,QAAb,CAAsBjC,YAAtB,EAAoC,4CAApC,CAAf;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAM6B,QAAQ,CAACN,OAAT,CAAiBO,WAAjB,GAA+BC,IAA/B,EAAlB,EA/B0B,CAgC1B;AACA;AAEH,GAnCD;;AAqCA,QAAMC,WAAW,GAAG,YAAY;AAC5B,UAAMC,UAAU,GAAG,MAAMzE,2BAA2B,CAAC0E,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAD,EAA8B,0BAA9B,CAApD;;AACA,QAAIF,UAAJ,EAAgB;AACZ,YAAMG,KAAK,GAAG,CAAC,OAAD,EAAS,SAAT,CAAd;;AACA,UAAIA,KAAK,CAACC,QAAN,CAAeJ,UAAU,CAACK,iBAA1B,CAAJ,EAAkD;AAC9C,cAAM9D,eAAe,CAAC,IAAD,CAArB;AACAO,QAAAA,cAAc,CAACkD,UAAU,CAACK,iBAAX,GAA+B/D,UAAhC,CAAd;AAEH,OAJD,MAMIQ,cAAc,CAAC,8BAAD,CAAd;AACP,KATD,MAWIA,cAAc,CAAC,8BAAD,CAAd;AACP,GAdD;;AAgBA,sBACI;AAAA,4BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,OAAO,EAAC,WADZ;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,SAAS,EAAC,MAHd;AAII,QAAA,OAAO,EAAEiD,WAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,QAAD;AAAU,QAAA,IAAI,EAAE,CAAhB;AAAmB,QAAA,KAAK,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT;AAA1B;AAAA;AAAA;AAAA;AAAA,cATJ,EAUK,MAAI;AACD,YAAG,CAACzD,UAAJ,EACAwB,OAAO,CAACC,GAAR,CAAYzB,UAAZ;AACI,4BAAQ,QAAC,QAAD;AAAU,UAAA,IAAI,EAAE,CAAhB;AAAmB,UAAA,KAAK,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAAR;AAA8D,OAb1E;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAkBI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,eAAT;AAAyB,MAAA,SAAS,MAAlC;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAA,+BACI,QAAC,SAAD;AACI,UAAA,KAAK,EAAC,YADV;AAEI,UAAA,SAAS,MAFb;AAGI,UAAA,KAAK,EAAEH,cAHX;AAII,UAAA,QAAQ,EAAEK;AAJd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAWI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAaI;AAAA,+BACI,QAAC,MAAD;AACI,UAAA,OAAO,EAAC,WADZ;AAEI,UAAA,KAAK,EAAC,SAFV;AAGI,UAAA,SAAS,EAAC,MAHd;AAII,UAAA,OAAO,EAAEwC,gBAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAbJ,eAsBI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAwBI;AAAA,+BACI;AAAA,6CAAyBE,IAAI,CAACE,SAAL,CAAepC,gBAAf,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAxBJ,eA2BI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA4BI;AAAA,+BACI;AAAA,0DAAsCH,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsDH;;GArOQZ,M;;KAAAA,M;AAuOT,eAAelB,OAAO,GAAGD,UAAU,CAACmB,MAAD,CAAb,CAAtB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppNavBar from '../component/AppNavBar';\nimport Web3 from 'web3';\nimport Grid from \"@material-ui/core/Grid\";\nimport { Paper, Button, TextField, Typography } from \"@material-ui/core\";\nimport { readInternalTranscriptsbyId } from \"../api\";\nimport Timeline from \"../component/Timeline\";\n\nconst helloWorldAddress = '0x18D9752E1b4F2AB987F3D93CF3084c83A195D4b7';\nconst accountStoreAddress = '0x055e01B90Ac0197144c55B75382A8bf293971176';\nconst hashStoreAddress = '0xe0120F023289CA6EaBAD6541BA00f8fb12B77418';\nconst host = 'http://192.168.0.105:8545'\nconst helloWorldAbi = require(\"../contracts-abi/helloWorld.json\");\nconst accountStoreAbi = require(\"../abi/AccountStore.json\");\nconst hashStoreAbi = require(\"../abi/HashStore.json\");\n/**\n * For transcript verification .\n * @param {props} props\n */\n\nfunction Verify(props) {\n    const [fakeTranscript, setTranscript] = React.useState(\"\");\n    const [openDialog, setOpenTimeline] = React.useState(false);\n    const onChange = (e) => {\n        setTranscript(e.target.value);\n        setStatus(\"Not started\")\n    };\n    const [Status, setStatus] = React.useState(\"Not started\");\n    const onChangeStatus = (val) => {\n        setStatus(val);\n    };\n\n    const transcriptStored = {\n        studentName: \"test_student\",\n        subject: {\n            name: \"test_subject\",\n            grade: 2,\n        }\n    };\n\n    const getContractInstance = async (\n        host,\n        deployedContractAbi,\n        deployedContractAddress,\n        walletAddress\n    ) => {\n        const web3 = new Web3(host);\n        try {\n            const password = \"123456\";\n            await web3.eth.personal.unlockAccount(walletAddress, password, 0);\n        } catch (e) {\n            console.log(e);\n        }\n\n        const contractInstance = new web3.eth.Contract(\n            deployedContractAbi,\n            deployedContractAddress.toLowerCase()\n        );\n        return contractInstance;\n    };\n\n    const setupContractCall = async () => {\n        let web3 = undefined;\n\n        if (!window.ethereum) {\n            window.alert(\"Please install MetaMask first.\");\n            return;\n        }\n        if (!web3) {\n            try {\n                // Request account access if needed\n                await window.ethereum.enable();\n\n                // We don't know window.web3 version, so we use our own instance of Web3\n                // with the injected provider given by MetaMask\n                web3 = new Web3(window.ethereum);\n            } catch (error) {\n                window.alert(\"You need to allow MetaMask.\");\n                return;\n            }\n        }\n        const coinbase = await web3.eth.getCoinbase();\n        if (!coinbase) {\n            window.alert(\"Please activate MetaMask first.\");\n            return;\n        }\n        const id = \"0x632989cf2526aefa95c4d6c3cab5710f711ed827\";\n        const publicAddress = id.toLowerCase();\n        const balance = await web3.eth.getBalance(publicAddress);\n        console.log(\n            \"Fetched address : \",\n            publicAddress,\n            \", Balance : \",\n            balance\n        );\n        return publicAddress\n    }\n\n\n\n    const verifyTranscript = async () => {\n        const Dummytranscript = {\n            studentName: \"test_student\",\n            subject: {\n                name: \"test_subject\",\n                grade: 2,\n            }\n        };\n\n        onChangeStatus(\"Processing of transcript underway\")\n        console.log(\"The click pre call flag\");\n        let walletAddress = await setupContractCall();\n        console.log(\"call a contract :\");\n        const contractInstance = await getContractInstance(\n            host,\n            JSON.parse(JSON.stringify(hashStoreAbi)),\n            hashStoreAddress,\n            walletAddress\n        );\n        console.log(contractInstance);\n        console.log(fakeTranscript, Dummytranscript)\n        /*var Event = contractInstance.validity({_from: walletAddress});\n        Event.watch(function(err, result) {\n            if (err) {\n              console.log(err)\n              return;\n            }\n            console.log(result.args.isValid)\n            // check that result.args._from is web3.eth.coinbase then\n            // display result.args._value in the UI and call    \n            Event.stopWatching()\n          })*/\n        const res = await contractInstance.methods.validate(JSON.parse(fakeTranscript), 0).send({ from: walletAddress });\n        console.log(\"Obtained value at deployed contract is: \");\n        if (res.events['validity']['returnValues']['isValid'])\n            onChangeStatus(\"Processing of transcript Successful!!!\")\n        else\n            onChangeStatus(\"Processing of transcript Failed :(\")\n        console.log(res.events['validity']['returnValues']['isValid'])\n        console.log(\"After click call flag\");\n    }\n\n    const FetchData = async () => {\n        let web3 = undefined;\n        if (!(window).ethereum) {\n            window.alert('Please install MetaMask first.');\n            return;\n        }\n\n\n        if (!web3) {\n            try {\n                // Request account access if needed\n                await (window).ethereum.enable();\n\n                // We don't know window.web3 version, so we use our own instance of Web3\n                // with the injected provider given by MetaMask\n                web3 = new Web3((window).ethereum);\n            } catch (error) {\n                window.alert('You need to allow MetaMask.');\n                return;\n            }\n        }\n\n        const coinbase = await web3.eth.getCoinbase();\n        if (!coinbase) {\n            window.alert('Please activate MetaMask first.');\n            return;\n        }\n\n        const publicAddress = coinbase.toLowerCase();\n        console.log(publicAddress)\n        let contract = new web3.eth.Contract(hashStoreAbi, \"0x2e1AfeAEE35302aBC85D4866f72675b62A916B59\");\n        console.log(await contract.methods.getGreeting().call());\n        //await contract.methods.setGreeting(\"TEST CHANGE!\").call()\n        //console.log(await contract.methods.getGreeting().call())\n\n    };\n\n    const checkStatus = async () => {\n        const transcript = await readInternalTranscriptsbyId(localStorage.getItem('jwt'), '61ed43288536553efc2a3544');\n        if (transcript) {\n            const steps = ['VALID','INVALID']\n            if (steps.includes(transcript.status_processing)) {\n                await setOpenTimeline(true);\n                onChangeStatus(transcript.status_processing + openDialog);\n                \n            }\n            else\n                onChangeStatus(\"Failed to fetch a transcript\")\n        }\n        else\n            onChangeStatus(\"Failed to fetch a transcript\")\n    }\n\n    return (\n        <container>\n            <AppNavBar />\n            <div >\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    component=\"span\"\n                    onClick={checkStatus}\n                >Check Status\n                </Button>\n                <br/>\n                <Timeline step={3} items={['a','b','c']}></Timeline>\n                {()=>{\n                    if(!openDialog)\n                    console.log(openDialog)\n                        return (<Timeline step={3} items={['a','b','c']}></Timeline>)}\n                    }\n            </div>\n            <Grid id=\"iconsPosition\" container>\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <TextField\n                        label=\"Transcript\"\n                        fullWidth\n                        value={fakeTranscript}\n                        onChange={onChange}\n                    />\n                </div>\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        onClick={verifyTranscript}\n                    >Verify Transcript\n                    </Button>\n                </div>\n                <Grid xs={1}> </Grid>\n\n                <div>\n                    <h3>Stored Tramscript : {JSON.stringify(transcriptStored)}</h3>\n                </div>\n                <Grid xs={1}> </Grid>\n                <div>\n                    <h3>Transcript Verification Status : {Status}</h3>\n                </div>\n            </Grid>\n        </container>\n\n    );\n}\n\nexport default connect()(withRouter(Verify));"]},"metadata":{},"sourceType":"module"}