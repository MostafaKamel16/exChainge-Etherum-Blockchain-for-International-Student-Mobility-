{"ast":null,"code":"import { readUser, userLogin, registerUser } from \"../../api\";\nexport function signup(username, publicAddress) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"SIGNUP_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"SIGNUP_FAILURE\",\n      error\n    };\n  }\n\n  function onUserAlreadyExists(error) {\n    return {\n      type: \"SIGNUP_USER_EXISTS\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const user = await readUser(publicAddress);\n\n      if (username !== user.username) {\n        const data = await registerUser(publicAddress, username);\n        dispatch(onSuccess({\n          username: data.username\n        }));\n      } else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserAlreadyExists(e));\n      }\n    }\n  };\n}\nexport function login(username, signData) {\n  function onSuccess(user) {\n    console.log(\"Success\" + user);\n    return {\n      type: \"LOGIN_SUCCESS\",\n      user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: \"LOGIN_FAILURE\",\n      error\n    };\n  }\n\n  function onUserNotFound(error) {\n    return {\n      type: \"LOGIN_USER_NOT_FOUND\",\n      error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      const user = await userLogin(signData.publicAddress, signData.signature);\n      const resp = user.metamask_address.toLowerCase() === signData.publicAddress.toLowerCase();\n      if (resp) dispatch(onSuccess({\n        username: username\n      }));else dispatch(onUserNotFound(\"User not present\"));\n    } catch (e) {\n      if (e === 401) {\n        dispatch(onFailure(e));\n      } else {\n        dispatch(onUserNotFound(e));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/redux/action/userAction.js"],"names":["readUser","userLogin","registerUser","signup","username","publicAddress","onSuccess","user","console","log","type","onFailure","error","onUserAlreadyExists","dispatch","data","e","login","signData","onUserNotFound","signature","resp","metamask_address","toLowerCase"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,YAA9B,QAAkD,WAAlD;AAEA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,aAA1B,EAAyC;AAC5C,WAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,IAAxB;AACA,WAAO;AAAEG,MAAAA,IAAI,EAAE,gBAAR;AAA0BH,MAAAA;AAA1B,KAAP;AACH;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAAEF,MAAAA,IAAI,EAAE,gBAAR;AAA0BE,MAAAA;AAA1B,KAAP;AACH;;AAED,WAASC,mBAAT,CAA6BD,KAA7B,EAAoC;AAChC,WAAO;AAAEF,MAAAA,IAAI,EAAE,oBAAR;AAA8BE,MAAAA;AAA9B,KAAP;AACH;;AAED,SAAO,MAAOE,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMP,IAAI,GAAG,MAAMP,QAAQ,CAACK,aAAD,CAA3B;;AACA,UAAID,QAAQ,KAAKG,IAAI,CAACH,QAAtB,EAAgC;AAC5B,cAAMW,IAAI,GAAG,MAAMb,YAAY,CAACG,aAAD,EAAgBD,QAAhB,CAA/B;AACAU,QAAAA,QAAQ,CAACR,SAAS,CAAC;AAAEF,UAAAA,QAAQ,EAAEW,IAAI,CAACX;AAAjB,SAAD,CAAV,CAAR;AACH,OAHD,MAGOU,QAAQ,CAACD,mBAAmB,CAAC,0BAAD,CAApB,CAAR;AACV,KAND,CAME,OAAOG,CAAP,EAAU;AACR,UAAIA,CAAC,KAAK,GAAV,EAAe;AACXF,QAAAA,QAAQ,CAACH,SAAS,CAACK,CAAD,CAAV,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACD,mBAAmB,CAACG,CAAD,CAApB,CAAR;AACH;AACJ;AACJ,GAdD;AAeH;AAED,OAAO,SAASC,KAAT,CAAeb,QAAf,EAAyBc,QAAzB,EAAmC;AACtC,WAASZ,SAAT,CAAmBC,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,IAAxB;AACA,WAAO;AAAEG,MAAAA,IAAI,EAAE,eAAR;AAAyBH,MAAAA;AAAzB,KAAP;AACH;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAAEF,MAAAA,IAAI,EAAE,eAAR;AAAyBE,MAAAA;AAAzB,KAAP;AACH;;AAED,WAASO,cAAT,CAAwBP,KAAxB,EAA+B;AAC3B,WAAO;AAAEF,MAAAA,IAAI,EAAE,sBAAR;AAAgCE,MAAAA;AAAhC,KAAP;AACH;;AAED,SAAO,MAAOE,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMP,IAAI,GAAG,MAAMN,SAAS,CACxBiB,QAAQ,CAACb,aADe,EAExBa,QAAQ,CAACE,SAFe,CAA5B;AAIA,YAAMC,IAAI,GACNd,IAAI,CAACe,gBAAL,CAAsBC,WAAtB,OACAL,QAAQ,CAACb,aAAT,CAAuBkB,WAAvB,EAFJ;AAGA,UAAIF,IAAJ,EAAUP,QAAQ,CAACR,SAAS,CAAC;AAAEF,QAAAA,QAAQ,EAAEA;AAAZ,OAAD,CAAV,CAAR,CAAV,KACKU,QAAQ,CAACK,cAAc,CAAC,kBAAD,CAAf,CAAR;AACR,KAVD,CAUE,OAAOH,CAAP,EAAU;AACR,UAAIA,CAAC,KAAK,GAAV,EAAe;AACXF,QAAAA,QAAQ,CAACH,SAAS,CAACK,CAAD,CAAV,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACK,cAAc,CAACH,CAAD,CAAf,CAAR;AACH;AACJ;AACJ,GAlBD;AAmBH","sourcesContent":["import { readUser, userLogin, registerUser } from \"../../api\";\n\nexport function signup(username, publicAddress) {\n    function onSuccess(user) {\n        console.log(\"Success\" + user);\n        return { type: \"SIGNUP_SUCCESS\", user };\n    }\n\n    function onFailure(error) {\n        return { type: \"SIGNUP_FAILURE\", error };\n    }\n\n    function onUserAlreadyExists(error) {\n        return { type: \"SIGNUP_USER_EXISTS\", error };\n    }\n\n    return async (dispatch) => {\n        try {\n            const user = await readUser(publicAddress);\n            if (username !== user.username) {\n                const data = await registerUser(publicAddress, username);\n                dispatch(onSuccess({ username: data.username }));\n            } else dispatch(onUserAlreadyExists(\"User resgistered already\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e));\n            } else {\n                dispatch(onUserAlreadyExists(e));\n            }\n        }\n    };\n}\n\nexport function login(username, signData) {\n    function onSuccess(user) {\n        console.log(\"Success\" + user);\n        return { type: \"LOGIN_SUCCESS\", user };\n    }\n\n    function onFailure(error) {\n        return { type: \"LOGIN_FAILURE\", error };\n    }\n\n    function onUserNotFound(error) {\n        return { type: \"LOGIN_USER_NOT_FOUND\", error };\n    }\n\n    return async (dispatch) => {\n        try {\n            const user = await userLogin(\n                signData.publicAddress,\n                signData.signature\n            );\n            const resp =\n                user.metamask_address.toLowerCase() ===\n                signData.publicAddress.toLowerCase();\n            if (resp) dispatch(onSuccess({ username: username }));\n            else dispatch(onUserNotFound(\"User not present\"));\n        } catch (e) {\n            if (e === 401) {\n                dispatch(onFailure(e));\n            } else {\n                dispatch(onUserNotFound(e));\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}