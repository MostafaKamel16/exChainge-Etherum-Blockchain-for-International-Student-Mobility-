{"ast":null,"code":"export const readNonce = publicAddress => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/nonce/${publicAddress.toLowerCase()}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const userLogin = (publicAddress, sign) => {\n  console.log(sign);\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      sign: sign,\n      metamask_address: publicAddress\n    })\n  }).then(response => {\n    const resp = response.json();\n    return resp;\n  }).catch(err => console.log(err));\n};\nexport const registerUser = (publicAddress, username, serverAddress) => {\n  const data = {\n    'username': username,\n    'metamask_address': publicAddress,\n    'nameServer_address': serverAddress\n  };\n  console.log(serverAddress, \"Flag\", data);\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/create`, {\n    'method': \"POST\",\n    'headers': {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    'body': JSON.stringify(data)\n  }).then(response => {\n    console.log(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signout = () => {\n  if (typeof window !== 'undefined') {\n    const {\n      token\n    } = JSON.parse(localStorage.getItem('jwt'));\n    window.localStorage.clear();\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/signout`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      console.log('signout', response);\n    }).catch(err => console.log(err));\n  }\n};\nexport const readUser = (publicAddress, token) => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read all recieved trancritps(the ones that need to be verified)\n\nexport const readExternalTranscripts = async token => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/verify/list`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read all recieved trancritps(the ones that need to be verified)\n\nexport const readInternalTranscriptsbyId = async (token, id) => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/${id}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To update one of the recieved trancritps(the one that need to be verified)\n\nexport const updateTranscriptStatus = async (id, status, token) => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/setUploaded`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: {\n      '_id': id,\n      'status': status\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read a list of all internal transcripts(ones that need to be uploded/sent)\n\nexport const readInternalTranscripts = async token => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/internalTranscripts/List`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const storeInternalTranscripts = async files => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + '/transcript/internalTranscripts', {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(files)\n  }).then(response => {\n    console.log(response.data);\n  });\n}; // to read partner University \n\nexport const readPartnerUni = async token => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/partners/get`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).then(json => {\n    return json.Unis;\n  }).catch(err => console.log(err));\n}; // to set and update the partner uni list \n\nexport const updatePartnerUnis = (data, token) => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/partners/add`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      partnerUnis: data\n    })\n  }).then(response => {\n    // localStorage.setItem(\"partnerUniList\",response.json())\n    // return response.json();\n    return readPartnerUni(token);\n  }).catch(err => console.log(err));\n}; // to read stats on transcript count for a partner University \n\nexport const getPartnerStats = async (uni, token) => {\n  return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/partners/getStats/${uni}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/services/api.js"],"names":["readNonce","publicAddress","fetch","process","env","REACT_APP_LOCAL_SERVER_ADDRESS","toLowerCase","method","headers","Accept","then","response","json","catch","err","console","log","userLogin","sign","body","JSON","stringify","metamask_address","resp","registerUser","username","serverAddress","data","signout","window","token","parse","localStorage","getItem","clear","readUser","Authorization","readExternalTranscripts","readInternalTranscriptsbyId","id","updateTranscriptStatus","status","readInternalTranscripts","storeInternalTranscripts","files","readPartnerUni","Unis","updatePartnerUnis","partnerUnis","getPartnerStats","uni"],"mappings":"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","sourcesContent":["export const readNonce = (publicAddress) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/nonce/${publicAddress.toLowerCase()}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const userLogin = (publicAddress, sign) => {\n    console.log(sign)\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/login`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            sign: sign,\n            metamask_address: publicAddress,\n        }),\n    })\n    .then((response) => {\n        const resp = response.json();\n        return resp;\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const registerUser = (publicAddress, username, serverAddress) => {\n    \n    const data = {\n        'username': username,\n        'metamask_address': publicAddress,\n        'nameServer_address': serverAddress\n    }\n    console.log(serverAddress, \"Flag\",data)\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/create`, {\n        'method': \"POST\",\n        'headers': {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        'body': JSON.stringify(data),\n    })\n    .then((response) => {\n        console.log(response)\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const signout = () => {\n    if (typeof window !== 'undefined') {\n      \n      const {token} = JSON.parse(localStorage.getItem('jwt'));\n        window.localStorage.clear();\n        return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS  + `/user/signout`, {\n          method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token,\n        },\n      })\n          .then((response) => {\n            console.log('signout', response);\n\n          })\n          .catch((err) => console.log(err));\n    }\n  };\n\nexport const readUser = (publicAddress,token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/user/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To read all recieved trancritps(the ones that need to be verified)\nexport const readExternalTranscripts = async (token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/verify/list`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To read all recieved trancritps(the ones that need to be verified)\nexport const readInternalTranscriptsbyId = async (token,id) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS  + `/transcript/${id}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To update one of the recieved trancritps(the one that need to be verified)\nexport const updateTranscriptStatus = async (id, status,token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/setUploaded`, {\n        method: \"PATCH\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: {\n            '_id': id,\n            'status': status\n        }\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n\n//To read a list of all internal transcripts(ones that need to be uploded/sent)\nexport const readInternalTranscripts = async (token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + `/transcript/internalTranscripts/List`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const storeInternalTranscripts = async (files) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS + '/transcript/internalTranscripts', {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(files),\n    }).then((response) => {\n        console.log(response.data);\n    });\n}\n\n// to read partner University \nexport const readPartnerUni = async (token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS  + `/partners/get`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .then((json) => {\n        return json.Unis;\n    })\n    .catch((err) => console.log(err));\n};\n\n// to set and update the partner uni list \nexport const updatePartnerUnis = (data, token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS  + `/partners/add`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            partnerUnis:data\n        }),\n    })\n    .then((response) => {\n        // localStorage.setItem(\"partnerUniList\",response.json())\n        // return response.json();\n        return readPartnerUni(token);\n    })\n    .catch((err) => console.log(err));\n};\n\n// to read stats on transcript count for a partner University \nexport const getPartnerStats = async (uni,token) => {\n    return fetch(process.env.REACT_APP_LOCAL_SERVER_ADDRESS  + `/partners/getStats/${uni}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}