{"ast":null,"code":"export const readNonce = publicAddress => {\n  return fetch(`http://localhost:4003/user/nonce/${publicAddress.toLowerCase()}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const userLogin = (publicAddress, sign) => {\n  console.log(sign);\n  return fetch(`http://localhost:4003/user/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      sign: sign,\n      metamask_address: publicAddress\n    })\n  }).then(response => {\n    const resp = response.json();\n    return resp;\n  }).catch(err => console.log(err));\n};\nexport const registerUser = (publicAddress, username, serverAddress) => {\n  const data = {\n    'username': username,\n    'metamask_address': publicAddress,\n    'nameServer_address': serverAddress\n  };\n  console.log(serverAddress, \"Flag\", data);\n  return fetch(`http://localhost:4003/user/create`, {\n    'method': \"POST\",\n    'headers': {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    'body': JSON.stringify(data)\n  }).then(response => {\n    console.log(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signout = () => {\n  if (typeof window !== 'undefined') {\n    const {\n      token\n    } = JSON.parse(localStorage.getItem('jwt'));\n    window.localStorage.clear();\n    return fetch(`http://localhost:4003/user/signout`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      console.log('signout', response);\n    }).catch(err => console.log(err));\n  }\n};\nexport const readUser = (publicAddress, token) => {\n  return fetch(`http://localhost:4003/user/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read all recieved trancritps(the ones that need to be verified)\n\nexport const readExternalTranscripts = async token => {\n  return fetch(`http://localhost:4003/transcript/verify/list`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read all recieved trancritps(the ones that need to be verified)\n\nexport const readInternalTranscriptsbyId = async (token, id) => {\n  return fetch(`http://localhost:4003/transcript/${id}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To update one of the recieved trancritps(the one that need to be verified)\n\nexport const updateTranscriptStatus = async (id, status, token) => {\n  return fetch(`http://localhost:4003/transcript/setUploaded`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: {\n      '_id': id,\n      'status': status\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read a list of all internal transcripts(ones that need to be uploded/sent)\n\nexport const readInternalTranscripts = async token => {\n  return fetch(`http://localhost:4003/transcript/internalTranscripts/List`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // to read partner University \n\nexport const readPartnerUni = async token => {\n  return fetch(`http://localhost:4003/partners/get`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // to set and update the partner uni list \n\nexport const updatePartnerUnis = (data, token) => {\n  return fetch(`http://localhost:4003/partners/add`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      partnerUnis: data\n    })\n  }).then(response => {\n    // localStorage.setItem(\"partnerUniList\",response.json())\n    // return response.json();\n    return readPartnerUni(token);\n  }).catch(err => console.log(err));\n}; // to read stats on transcript count for a partner University \n\nexport const getPartnerStats = async (uni, token) => {\n  return fetch(`http://localhost:4003/partners/getStats/${uni}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/services/api.js"],"names":["readNonce","publicAddress","fetch","toLowerCase","method","headers","Accept","then","response","json","catch","err","console","log","userLogin","sign","body","JSON","stringify","metamask_address","resp","registerUser","username","serverAddress","data","signout","window","token","parse","localStorage","getItem","clear","readUser","Authorization","readExternalTranscripts","readInternalTranscriptsbyId","id","updateTranscriptStatus","status","readInternalTranscripts","readPartnerUni","updatePartnerUnis","partnerUnis","getPartnerStats","uni"],"mappings":"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","sourcesContent":["export const readNonce = (publicAddress) => {\n    return fetch(`http://localhost:4003/user/nonce/${publicAddress.toLowerCase()}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const userLogin = (publicAddress, sign) => {\n    console.log(sign)\n    return  fetch(`http://localhost:4003/user/login`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            sign: sign,\n            metamask_address: publicAddress,\n        }),\n    })\n    .then((response) => {\n        const resp = response.json();\n        return resp;\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const registerUser = (publicAddress, username, serverAddress) => {\n    \n    const data = {\n        'username': username,\n        'metamask_address': publicAddress,\n        'nameServer_address': serverAddress\n    }\n    console.log(serverAddress, \"Flag\",data)\n    return fetch(`http://localhost:4003/user/create`, {\n        'method': \"POST\",\n        'headers': {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        'body': JSON.stringify(data),\n    })\n    .then((response) => {\n        console.log(response)\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const signout = () => {\n    if (typeof window !== 'undefined') {\n      \n      const {token} = JSON.parse(localStorage.getItem('jwt'));\n        window.localStorage.clear();\n      return fetch(`http://localhost:4003/user/signout`, {\n          method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token,\n        },\n      })\n          .then((response) => {\n            console.log('signout', response);\n\n          })\n          .catch((err) => console.log(err));\n    }\n  };\n\nexport const readUser = (publicAddress,token) => {\n    return fetch(`http://localhost:4003/user/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To read all recieved trancritps(the ones that need to be verified)\nexport const readExternalTranscripts = async (token) => {\n    return fetch(`http://localhost:4003/transcript/verify/list`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To read all recieved trancritps(the ones that need to be verified)\nexport const readInternalTranscriptsbyId = async (token,id) => {\n    return fetch(`http://localhost:4003/transcript/${id}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To update one of the recieved trancritps(the one that need to be verified)\nexport const updateTranscriptStatus = async (id, status,token) => {\n    return fetch(`http://localhost:4003/transcript/setUploaded`, {\n        method: \"PATCH\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: {\n            '_id': id,\n            'status': status\n        }\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n\n//To read a list of all internal transcripts(ones that need to be uploded/sent)\nexport const readInternalTranscripts = async (token) => {\n    return fetch(`http://localhost:4003/transcript/internalTranscripts/List`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n// to read partner University \nexport const readPartnerUni = async (token) => {\n    return fetch(`http://localhost:4003/partners/get`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n// to set and update the partner uni list \nexport const updatePartnerUnis = (data, token) => {\n    return fetch(`http://localhost:4003/partners/add`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            partnerUnis:data\n        }),\n    })\n    .then((response) => {\n        // localStorage.setItem(\"partnerUniList\",response.json())\n        // return response.json();\n        return readPartnerUni(token);\n    })\n    .catch((err) => console.log(err));\n};\n\n// to read stats on transcript count for a partner University \nexport const getPartnerStats = async (uni,token) => {\n    return fetch(`http://localhost:4003/partners/getStats/${uni}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}