{"ast":null,"code":"export const readNounce = publicAddress => {\n  console.log(publicAddress);\n  return fetch(`http://localhost:4003/user/nouce/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const userLogin = (publicAddress, sign) => {\n  return fetch(`http://localhost:4003/user/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      sign: sign,\n      metamask_address: publicAddress\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const registerUser = (publicAddress, username) => {\n  return fetch(`http://localhost:4000/user/create`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      metamask_address: publicAddress\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const readUser = publicAddress => {\n  return fetch(`http://localhost:4000/user/nounce/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //http://localhost:4000/transcript/internalTranscripts/List\n\nexport const readInternalTranscripts = async () => {\n  return fetch(`http://localhost:4000/transcript/internalTranscripts/List`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/api.js"],"names":["readNounce","publicAddress","console","log","fetch","method","headers","Accept","then","response","json","catch","err","userLogin","sign","body","JSON","stringify","metamask_address","registerUser","username","readUser","readInternalTranscripts"],"mappings":"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","sourcesContent":["export const readNounce = (publicAddress) => {\n    console.log(publicAddress)\n    return fetch(`http://localhost:4003/user/nouce/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((response) => {\n            return response.json();\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const userLogin = (publicAddress, sign) => {\n    return fetch(`http://localhost:4003/user/login`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            sign: sign,\n            metamask_address: publicAddress,\n        }),\n    })\n        .then((response) => {\n            return response.json();\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const registerUser = (publicAddress, username) => {\n    return fetch(`http://localhost:4000/user/create`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            username: username,\n            metamask_address: publicAddress,\n        }),\n    })\n        .then((response) => {\n            return response.json();\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const readUser = (publicAddress) => {\n    return fetch(`http://localhost:4000/user/nounce/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((response) => {\n            return response.json();\n        })\n        .catch((err) => console.log(err));\n};\n\n//http://localhost:4000/transcript/internalTranscripts/List\nexport const readInternalTranscripts = async () => {\n    return fetch(`http://localhost:4000/transcript/internalTranscripts/List`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((response) => {\n            return response.json();\n        })\n        .catch((err) => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}