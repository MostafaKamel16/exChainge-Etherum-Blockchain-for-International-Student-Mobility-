{"ast":null,"code":"var _jsxFileName = \"/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Paper, Button, TextField, Typography } from \"@material-ui/core\";\nimport { verifyTranscript } from \"../services/blockchain/contractCalls\";\nimport { readInternalTranscriptsbyId } from \"../services/api\";\nimport Timeline from \"../component/Timeline\";\nimport hash from \"object-hash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst host = 'http://192.168.0.105:8545';\n/**\n * For transcript verification .\n * @param {props} props\n */\n\nfunction Verify(props) {\n  _s();\n\n  const [fakeTranscript, setTranscript] = React.useState(\"\");\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [transcriptIndex, setTranscriptIndex] = React.useState(0);\n  const [openDialog, setOpenTimeline] = React.useState(false);\n\n  const isValid = () => {\n    if (openDialog) return 'VALID';else return 'INVALID';\n  };\n\n  const steps = ['NOTVERIFIED', 'VERIFYING', isValid()];\n\n  const onChange = e => {\n    setTranscript(e.target.value);\n    setStatus(\"Not started\");\n  };\n\n  const [Status, setStatus] = React.useState(\"Not started\");\n\n  const onChangeStatus = val => {\n    setStatus(val);\n  };\n\n  const transcriptStored = {\n    studentName: \"test_student\",\n    subject: {\n      name: \"test_subject\",\n      grade: 2\n    }\n  };\n\n  const handleSetTranscriptIndex = e => {\n    setTranscriptIndex(parseInt(e.target.value));\n  };\n\n  const handleVerifyTranscript = async () => {\n    onChangeStatus(\"Processing of transcript underway\");\n    const dummyTranscript = {\n      \"studentName\": \"test_student\",\n      \"subject\": {\n        \"name\": \"test_subject\",\n        \"grade\": 2\n      }\n    };\n    const transcriptHash = hash(dummyTranscript);\n    const result = await verifyTranscript(transcriptHash, transcriptIndex);\n\n    if (result) {\n      onChangeStatus(\"Processing of transcript Successful!!!\");\n    } else {\n      onChangeStatus(\"Processing of transcript Failed :(\");\n    }\n  };\n\n  const checkStatus = async () => {\n    const transcript = await readInternalTranscriptsbyId(localStorage.getItem('jwt'), '61ed43288536553efc2a3544');\n    const possibleSteps = ['NOTUPLOADED', 'UPLOADING', 'BATCHED', 'VALID', 'INVALID'];\n\n    if (transcript) {\n      console.log();\n\n      if (possibleSteps.includes(transcript.status_processing)) {\n        if (transcript.status_processing === 'VALID') await setActiveStep(3);else if (transcript.status_processing === 'BATCHED') await setActiveStep(1);else if (transcript.status_processing === 'INVALID') await setActiveStep(3);\n        await setOpenTimeline(true);\n        await onChangeStatus(transcript.status_processing + openDialog);\n      } else onChangeStatus(\"Failed to fetch a transcript\");\n    } else onChangeStatus(\"Failed to fetch a transcript\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"container\", {\n    children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        onClick: checkStatus,\n        children: \"Check Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), !openDialog ? /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(Timeline, {\n        step: activeStep,\n        items: steps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      id: \"iconsPosition\",\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Transcript\",\n          fullWidth: true,\n          value: fakeTranscript,\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"TranscriptIndex\",\n          fullWidth: true,\n          value: transcriptIndex,\n          onChange: handleSetTranscriptIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          component: \"span\",\n          onClick: handleVerifyTranscript,\n          children: \"Verify Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Stored Tramscript : \", JSON.stringify(transcriptStored)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 1,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Transcript Verification Status : \", Status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Verify, \"lwNjhBfiv7K9JpIdZaUKEslnNqc=\");\n\n_c = Verify;\nexport default connect()(withRouter(Verify));\n\nvar _c;\n\n$RefreshReg$(_c, \"Verify\");","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/views/Verify.js"],"names":["React","withRouter","connect","AppNavBar","Grid","Paper","Button","TextField","Typography","verifyTranscript","readInternalTranscriptsbyId","Timeline","hash","host","Verify","props","fakeTranscript","setTranscript","useState","activeStep","setActiveStep","transcriptIndex","setTranscriptIndex","openDialog","setOpenTimeline","isValid","steps","onChange","e","target","value","setStatus","Status","onChangeStatus","val","transcriptStored","studentName","subject","name","grade","handleSetTranscriptIndex","parseInt","handleVerifyTranscript","dummyTranscript","transcriptHash","result","checkStatus","transcript","localStorage","getItem","possibleSteps","console","log","includes","status_processing","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppNavBar from \"../component/AppNavBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Paper, Button, TextField, Typography } from \"@material-ui/core\";\nimport { verifyTranscript } from \"../services/blockchain/contractCalls\";\nimport { readInternalTranscriptsbyId } from \"../services/api\";\nimport Timeline from \"../component/Timeline\";\nimport hash from \"object-hash\";\n\nconst host = 'http://192.168.0.105:8545'\n/**\n * For transcript verification .\n * @param {props} props\n */\n\nfunction Verify(props) {\n    const [fakeTranscript, setTranscript] = React.useState(\"\");\n    const [activeStep, setActiveStep] = React.useState(0)\n    const [transcriptIndex, setTranscriptIndex] = React.useState(0);\n\n    const [openDialog, setOpenTimeline] = React.useState(false);\n    const isValid = () => {\n        if (openDialog) return 'VALID'\n        else return 'INVALID'\n    }\n    const steps = ['NOTVERIFIED', 'VERIFYING', isValid()]\n    const onChange = (e) => {\n        setTranscript(e.target.value);\n        setStatus(\"Not started\");\n    };\n    const [Status, setStatus] = React.useState(\"Not started\");\n    const onChangeStatus = (val) => {\n        setStatus(val);\n    };\n\n    const transcriptStored = {\n        studentName: \"test_student\",\n        subject: {\n            name: \"test_subject\",\n            grade: 2,\n        },\n    };\n\n    const handleSetTranscriptIndex = (e) => {\n        setTranscriptIndex(parseInt(e.target.value));\n    };\n\n    const handleVerifyTranscript = async () => {\n        onChangeStatus(\"Processing of transcript underway\");\n\n        const dummyTranscript = {\n            \"studentName\": \"test_student\",\n            \"subject\": {\n                \"name\": \"test_subject\",\n                \"grade\": 2\n            }\n        };\n        const transcriptHash = hash(dummyTranscript);\n        const result = await verifyTranscript(transcriptHash, transcriptIndex);\n        if (result) {\n            onChangeStatus(\"Processing of transcript Successful!!!\");\n        }\n        else {\n            onChangeStatus(\"Processing of transcript Failed :(\");\n        }\n    }\n\n    const checkStatus = async () => {\n        const transcript = await readInternalTranscriptsbyId(localStorage.getItem('jwt'), '61ed43288536553efc2a3544');\n        const possibleSteps = ['NOTUPLOADED', 'UPLOADING', 'BATCHED', 'VALID', 'INVALID']\n        if (transcript) {\n            console.log()\n            if (possibleSteps.includes(transcript.status_processing)) {\n                if (transcript.status_processing === 'VALID')\n                    await setActiveStep(3)\n                else if (transcript.status_processing === 'BATCHED')\n                    await setActiveStep(1)\n                else if (transcript.status_processing === 'INVALID')\n                    await setActiveStep(3)\n                await setOpenTimeline(true);\n\n                await onChangeStatus(transcript.status_processing + openDialog);\n\n            }\n            else\n                onChangeStatus(\"Failed to fetch a transcript\")\n        }\n        else\n            onChangeStatus(\"Failed to fetch a transcript\")\n    }\n\n    return (\n        <container>\n            <AppNavBar />\n            <div >\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    component=\"span\"\n                    onClick={checkStatus}\n                >Check Status\n                </Button>\n                <br />\n                {!openDialog ? (<br />) :\n                    (<Timeline step={activeStep} items={steps}></Timeline>)\n                }\n            </div>\n            <Grid id=\"iconsPosition\" container>\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <TextField\n                        label=\"Transcript\"\n                        fullWidth\n                        value={fakeTranscript}\n                        onChange={onChange}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        label=\"TranscriptIndex\"\n                        fullWidth\n                        value={transcriptIndex}\n                        onChange={handleSetTranscriptIndex}\n                    />\n                </div>\n\n                <Grid xs={1}> </Grid>\n\n                <div >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        onClick={handleVerifyTranscript}\n                    >Verify Transcript\n                    </Button>\n                </div>\n                <Grid xs={1}> </Grid>\n\n                <div>\n                    <h3>Stored Tramscript : {JSON.stringify(transcriptStored)}</h3>\n                </div>\n                <Grid xs={1}> </Grid>\n                <div>\n                    <h3>Transcript Verification Status : {Status}</h3>\n                </div>\n            </Grid>\n        </container>\n    );\n}\n\nexport default connect()(withRouter(Verify));"]},"metadata":{},"sourceType":"module"}