{"ast":null,"code":"export const readNounce = publicAddress => {\n  return fetch(`http://localhost:4003/user/nonce/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const userLogin = (publicAddress, sign) => {\n  console.log(sign);\n  return fetch(`http://localhost:4003/user/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      sign: sign,\n      metamask_address: publicAddress\n    })\n  }).then(response => {\n    const resp = response.json();\n    return resp;\n  }).catch(err => console.log(err));\n};\nexport const registerUser = (publicAddress, username, serverAddress) => {\n  console.log(serverAddress);\n  return fetch(`http://localhost:4003/user/create`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      metamask_address: publicAddress,\n      nameServer_address: serverAddress\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signout = () => {\n  if (typeof window !== 'undefined') {\n    const {\n      token\n    } = JSON.parse(localStorage.getItem('jwt'));\n    return fetch(process.env.REACT_APP_API_URL + `/user/signout`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      console.log('signout', response);\n      window.localStorage.clear();\n    }).catch(err => console.log(err));\n  }\n};\nexport const readUser = (publicAddress, token) => {\n  return fetch(`http://localhost:4003/user/${publicAddress}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read all recieved trancritps(the ones that need to be verified)\n\nexport const readExternalTranscripts = async token => {\n  return fetch(`http://localhost:4003/transcript/verify/list`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To update one of the recieved trancritps(the one that need to be verified)\n\nexport const updateTranscriptStatus = async (id, status, token) => {\n  return fetch(`http://localhost:4003/transcript/setUploaded`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: {\n      '_id': id,\n      'status': status\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //To read a list of all internal transcripts(ones that need to be uploded/sent)\n\nexport const readInternalTranscripts = async token => {\n  return fetch(`http://localhost:4003/transcript/internalTranscripts/List`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // to read partner University \n\nexport const readPartnerUni = async token => {\n  return fetch(`http://localhost:4003/partners/get`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // to set and update the partner uni list \n\nexport const updatePartnerUnis = (data, token) => {\n  return fetch(`http://localhost:4003/user/create`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      partnerUnis: data\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // to read stats on transcript count for a partner University \n\nexport const getPartnerStats = async (uni, token) => {\n  return fetch(`http://localhost:4003/partners/getStats/${uni}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/bob/codes/mobility-blockchain-frontend/src/api.js"],"names":["readNounce","publicAddress","fetch","method","headers","Accept","then","response","json","catch","err","console","log","userLogin","sign","body","JSON","stringify","metamask_address","resp","registerUser","username","serverAddress","nameServer_address","signout","window","token","parse","localStorage","getItem","process","env","REACT_APP_API_URL","clear","readUser","Authorization","readExternalTranscripts","updateTranscriptStatus","id","status","readInternalTranscripts","readPartnerUni","updatePartnerUnis","data","partnerUnis","getPartnerStats","uni"],"mappings":"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","sourcesContent":["export const readNounce = (publicAddress) => {\n    return fetch(`http://localhost:4003/user/nonce/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const userLogin = (publicAddress, sign) => {\n    console.log(sign)\n    return  fetch(`http://localhost:4003/user/login`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            sign: sign,\n            metamask_address: publicAddress,\n        }),\n    })\n    .then((response) => {\n        const resp = response.json();\n        return resp;\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const registerUser = (publicAddress, username, serverAddress) => {\n    console.log(serverAddress)\n    return fetch(`http://localhost:4003/user/create`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            username: username,\n            metamask_address: publicAddress,\n            nameServer_address: serverAddress\n        }),\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const signout = () => {\n    if (typeof window !== 'undefined') {\n      \n      const {token} = JSON.parse(localStorage.getItem('jwt'));\n      return fetch(process.env.REACT_APP_API_URL + `/user/signout`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token,\n        },\n      })\n          .then((response) => {\n            console.log('signout', response);\n            window.localStorage.clear();\n          })\n          .catch((err) => console.log(err));\n    }\n  };\n\nexport const readUser = (publicAddress,token) => {\n    return fetch(`http://localhost:4003/user/${publicAddress}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To read all recieved trancritps(the ones that need to be verified)\nexport const readExternalTranscripts = async (token) => {\n    return fetch(`http://localhost:4003/transcript/verify/list`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n//To update one of the recieved trancritps(the one that need to be verified)\nexport const updateTranscriptStatus = async (id, status,token) => {\n    return fetch(`http://localhost:4003/transcript/setUploaded`, {\n        method: \"PATCH\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: {\n            '_id': id,\n            'status': status\n        }\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n\n//To read a list of all internal transcripts(ones that need to be uploded/sent)\nexport const readInternalTranscripts = async (token) => {\n    return fetch(`http://localhost:4003/transcript/internalTranscripts/List`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n// to read partner University \nexport const readPartnerUni = async (token) => {\n    return fetch(`http://localhost:4003/partners/get`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n// to set and update the partner uni list \nexport const updatePartnerUnis = (data, token) => {\n    return fetch(`http://localhost:4003/user/create`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            partnerUnis:data\n        }),\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\n// to read stats on transcript count for a partner University \nexport const getPartnerStats = async (uni,token) => {\n    return fetch(`http://localhost:4003/partners/getStats/${uni}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n    })\n    .then((response) => {\n        return response.json();\n    })\n    .catch((err) => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}